// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Add Comment";
Blockly.Msg["ARRANGE_H"] = "Arrange Blocks Horizontally";
Blockly.Msg["ARRANGE_S"] = "Arrange Blocks Diagonally";
Blockly.Msg["ARRANGE_V"] = "Arrange Blocks Vertically";
Blockly.Msg["BACKPACK_CONFIRM_EMPTY"] = "Are you sure you want to empty the backpack?";
Blockly.Msg["BACKPACK_EMPTY"] = "Empty the Backpack";
Blockly.Msg["BACKPACK_GET"] = "Paste All Blocks from Backpack";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";
Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "blend";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "random colour";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "blue";
Blockly.Msg["COLOUR_RGB_GREEN"] = "green";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
Blockly.Msg["COLOUR_RGB_RED"] = "red";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colour with";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg["CONFIRM_DELETE"] = "Confirm deletion";
Blockly.Msg["CONNECT_TO_DO_IT"] = "You must be connected to the companion or emulator to use 'Do It'";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["COPY_ALLBLOCKS"] = "Copy All Blocks to Backpack";
Blockly.Msg["COPY_TO_BACKPACK"] = "Add to Backpack";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
Blockly.Msg["DIALOG_ENTER_VALUES"] = "Enter values for:";
Blockly.Msg["DIALOG_SUBMIT"] = "Submit";
Blockly.Msg["DIALOG_UNBOUND_VAR"] = "Unbound Variables";
Blockly.Msg["DISABLE_ALL_BLOCKS"] = "Disable All Blocks";
Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
Blockly.Msg["DISABLE_GRID"] = "Disable Workspace Grid";
Blockly.Msg["DISABLE_SNAPPING"] = "Disable Snap to Grid";
Blockly.Msg["DOWNLOAD_BLOCKS_AS_PNG"] = "Download Blocks as PNG";
Blockly.Msg["DO_IT_DISCONNECTED"] = "Do It (Companion not connected)";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
Blockly.Msg["ENABLE_ALL_BLOCKS"] = "Enable All Blocks";
Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
Blockly.Msg["ENABLE_GRID"] = "Enable Workspace Grid";
Blockly.Msg["ENABLE_SNAPPING"] = "Enable Snap to Grid";
Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
Blockly.Msg["EXPORT_IMAGE"] = "Download Blocks as Image";
Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
Blockly.Msg["GENERICIZE_BLOCK"] = "Make Generic";
Blockly.Msg["HELP"] = "Help";
Blockly.Msg["HIDE"] = "Hide Workspace Controls";
Blockly.Msg["HIDE_ALL_COMMENTS"] = "Hide All Comments";
Blockly.Msg["HORIZONTAL_PARAMETERS"] = "Arrange Parameters Horizontally";
Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
Blockly.Msg["IOS_CANCEL"] = "Cancel";
Blockly.Msg["IOS_ERROR"] = "Error";
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
Blockly.Msg["LANG_CATEGORY_CONTROLS"] = "Control";
Blockly.Msg["LANG_CATEGORY_LISTS"] = "Lists";
Blockly.Msg["LANG_CATEGORY_LOGIC"] = "Logic";
Blockly.Msg["LANG_CATEGORY_MATH"] = "Math";
Blockly.Msg["LANG_CATEGORY_TEXT"] = "Text";
Blockly.Msg["LANG_COLOUR_BLACK"] = "black";
Blockly.Msg["LANG_COLOUR_BLUE"] = "blue";
Blockly.Msg["LANG_COLOUR_CYAN"] = "cyan";
Blockly.Msg["LANG_COLOUR_DARK_GRAY"] = "dark gray";
Blockly.Msg["LANG_COLOUR_GRAY"] = "gray";
Blockly.Msg["LANG_COLOUR_GREEN"] = "green";
Blockly.Msg["LANG_COLOUR_LIGHT_GRAY"] = "light gray";
Blockly.Msg["LANG_COLOUR_MAGENTA"] = "magenta";
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR"] = "make color";
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR_HELPURL"] = "/reference/blocks/colors.html#make";
Blockly.Msg["LANG_COLOUR_ORANGE"] = "orange";
Blockly.Msg["LANG_COLOUR_PICKER_HELPURL"] = "/reference/blocks/colors.html#basic";
Blockly.Msg["LANG_COLOUR_PICKER_TOOLTIP"] = "Click the square to pick a color.";
Blockly.Msg["LANG_COLOUR_PINK"] = "pink";
Blockly.Msg["LANG_COLOUR_RED"] = "red";
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR"] = "split color";
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR_HELPURL"] = "/reference/blocks/colors.html#split";
Blockly.Msg["LANG_COLOUR_WHITE"] = "white";
Blockly.Msg["LANG_COLOUR_YELLOW"] = "yellow";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_METHODS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_EVENTS_HELPURL"] = "/reference/components/animation.html#Ball";
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_METHODS_HELPURL"] = "/reference/components/animation.html#Ball";
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Ball";
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_EVENTS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_METHODS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Button";
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_HELPURL"] = "/reference/components/userinterface.html#Button";
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Button";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_EVENTS_HELPURL"] = "/reference/components/media.html#Camcorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_HELPURL"] = "/reference/components/media.html#Camcorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_METHODS_HELPURL"] = "/reference/components/media.html#Camcorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camcorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_EVENTS_HELPURL"] = "/reference/components/media.html#Camera";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_HELPURL"] = "/reference/components/media.html#Camera";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_METHODS_HELPURL"] = "/reference/components/media.html#Camera";
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camera";
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_EVENTS_HELPURL"] = "/reference/components/animation.html#Canvas";
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_HELPURL"] = "/reference/components/animation.html#Canvas";
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_METHODS_HELPURL"] = "/reference/components/animation.html#Canvas";
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Canvas";
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#CheckBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_HELPURL"] = "/reference/components/userinterface.html#CheckBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#CheckBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_EVENTS_HELPURL"] = "/reference/components/sensors.html#Clock";
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_HELPURL"] = "/reference/components/sensors.html#Clock";
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_METHODS_HELPURL"] = "/reference/components/sensors.html#Clock";
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#Clock";
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#ContactPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_METHODS_HELPURL"] = "/reference/components/social.html#ContactPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#ContactPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_DATEPICKER_HELPURL"] = "/reference/components/userinterface.html#DatePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#EmailPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_METHODS_HELPURL"] = "/reference/components/social.html#EmailPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#EmailPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_EVENTS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_METHODS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_PROPERTIES_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_EVENTS_HELPURL"] = "/reference/components/internal.html#GameClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_METHODS_HELPURL"] = "/reference/components/internal.html#GameClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_PROPERTIES_HELPURL"] = "/reference/components/internal.html#GameClient";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE"] = "when any ";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT"] = "of component";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_CALL"] = "call ";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT"] = "for component";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_OF_COMPONENT"] = "of component";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_SET"] = "set ";
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_TO"] = " to";
Blockly.Msg["LANG_COMPONENT_BLOCK_GETTER_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_HORIZARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#HorizontalArrangement";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_EVENTS_HELPURL"] = "/reference/components/media.html#ImagePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_HELPURL"] = "/reference/components/media.html#ImagePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_METHODS_HELPURL"] = "/reference/components/media.html#ImagePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_PROPERTIES_HELPURL"] = "/reference/components/media.html#ImagePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_EVENTS_HELPURL"] = "/reference/components/animation.html#ImageSprite";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_METHODS_HELPURL"] = "/reference/components/animation.html#ImageSprite";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_PROPERTIES_HELPURL"] = "/reference/components/animation.html#ImageSprite";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Image";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_HELPURL"] = "/reference/components/userinterface.html#Image";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_METHODS_HELPURL"] = "/reference/components/userinterface.html#Image";
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Image";
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Label";
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_HELPURL"] = "/reference/components/userinterface.html#Label";
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_METHODS_HELPURL"] = "/reference/components/userinterface.html#Label";
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Label";
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_HELPURL"] = "/reference/components/userinterface.html#ListPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_METHODS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#ListPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTVIEW_HELPURL"] = "/reference/components/userinterface.html#ListView";
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#LocationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL"] = "call ";
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Notifier";
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Notifier";
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Notifier";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneCall";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_METHODS_HELPURL"] = "/reference/components/social.html#PhoneCall";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneCall";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_METHODS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#Player";
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_HELPURL"] = "/reference/components/media.html#Player";
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_METHODS_HELPURL"] = "/reference/components/media.html#Player";
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Player";
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Screen";
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_HELPURL"] = "/reference/components/userinterface.html#Screen";
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_METHODS_HELPURL"] = "/reference/components/userinterface.html#Screen";
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Screen";
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_HELPURL"] = "";
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_SET"] = "set ";
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_TO"] = " to";
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Slider";
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_HELPURL"] = "/reference/components/userinterface.html#Slider";
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Slider";
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Slider";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_EVENTS_HELPURL"] = "/reference/components/media.html#SoundRecorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_METHODS_HELPURL"] = "/reference/components/media.html#SoundRecorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SoundRecorder";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_EVENTS_HELPURL"] = "/reference/components/media.html#Sound";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_HELPURL"] = "/reference/components/media.html#Sound";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_METHODS_HELPURL"] = "/reference/components/media.html#Sound";
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_PROPERTIES_HELPURL"] = "/reference/components/media.html#Sound";
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_EVENTS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_METHODS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";
Blockly.Msg["LANG_COMPONENT_BLOCK_SPINNER_HELPURL"] = "/reference/components/userinterface.html#Spinner";
Blockly.Msg["LANG_COMPONENT_BLOCK_SWITCH_HELPURL"] = "/reference/components/userinterface.html#Switch";
Blockly.Msg["LANG_COMPONENT_BLOCK_TABLEARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#TableArrangement";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#TextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_HELPURL"] = "/reference/components/userinterface.html#TextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#TextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#TextBox";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_EVENTS_HELPURL"] = "/reference/components/social.html#Texting";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_METHODS_HELPURL"] = "/reference/components/social.html#Texting";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_PROPERTIES_HELPURL"] = "/reference/components/social.html#Texting";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_EVENTS_HELPURL"] = "/reference/components/media.html#TextToSpeech";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_METHODS_HELPURL"] = "/reference/components/media.html#TextToSpeech";
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_PROPERTIES_HELPURL"] = "/reference/components/media.html#TextToSpeech";
Blockly.Msg["LANG_COMPONENT_BLOCK_TIMEPICKER_HELPURL"] = "/reference/components/userinterface.html#TimePicker";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_HELPURL"] = "/reference/components/storage.html#TinyDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyWebDB";
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_DO"] = "do";
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_WHEN"] = "when ";
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_EVENTS_HELPURL"] = "/reference/components/social.html#Twitter";
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_METHODS_HELPURL"] = "/reference/components/social.html#Twitter";
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_PROPERTIES_HELPURL"] = "/reference/components/social.html#Twitter";
Blockly.Msg["LANG_COMPONENT_BLOCK_VERTARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#VerticalArrangement";
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#VideoPlayer";
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_HELPURL"] = "/reference/components/media.html#VideoPlayer";
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_METHODS_HELPURL"] = "/reference/components/media.html#VideoPlayer";
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#VideoPlayer";
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_EVENTS_HELPURL"] = "/reference/components/internal.html#votingevents";
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_METHODS_HELPURL"] = "/reference/components/internal.html#votingmethods";
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_PROPERTIES_HELPURL"] = "/reference/components/internal.html#votingproperties";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_METHODS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#WebViewer";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_EVENTS_HELPURL"] = "/reference/components/connectivity.html#Web";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_METHODS_HELPURL"] = "/reference/components/connectivity.html#Web";
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#Web";
Blockly.Msg["LANG_CONTROLS_BREAK_COLLAPSED_TEXT"] = "break";
Blockly.Msg["LANG_CONTROLS_BREAK_HELPURL"] = "/reference/blocks/control.html#break";
Blockly.Msg["LANG_CONTROLS_BREAK_INPUT_TEXT"] = "value";
Blockly.Msg["LANG_CONTROLS_BREAK_TITLE"] = "break";
Blockly.Msg["LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT"] = "if";
Blockly.Msg["LANG_CONTROLS_CHOOSE_HELPURL"] = "/reference/blocks/control.html#choose";
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_ELSE_RETURN"] = "else";
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_TEST"] = "";
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_THEN_RETURN"] = "then";
Blockly.Msg["LANG_CONTROLS_CHOOSE_TITLE"] = "if";
Blockly.Msg["LANG_CONTROLS_CHOOSE_TOOLTIP"] = "If the condition being tested is true,";
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_COLLAPSED_TEXT"] = "close application";
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TITLE"] = "close application";
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TOOLTIP"] = "Closes all screens in this app and stops the app.";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT"] = "close screen";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TITLE"] = "close screen";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TOOLTIP"] = "Close the current screen";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_COLLAPSED_TEXT"] = "close screen with plain text";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_HELPURL"] = "/reference/blocks/control.html#closescreenwithplaintext";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE"] = "close screen with plain text";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TOOLTIP"] = "Closes the current screen and returns text to the app that ";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_COLLAPSED_TEXT"] = "close screen with value";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_INPUT_RESULT"] = "result";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE"] = "close screen with value";
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TOOLTIP"] = "Closes the current screen and returns a result to the ";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_COLLAPSED_TEXT"] = "do/result";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_HELPURL"] = "/reference/blocks/control.html#doreturn";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN"] = "result";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TITLE"] = "do result";
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_COLLAPSED_TEXT"] = "eval but ignore";
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_HELPURL"] = "/reference/blocks/control.html#evaluate";
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE"] = "evaluate but ignore result";
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TOOLTIP"] = "Runs the connected block of code and ignores the return value (if any). Useful if need to call a procedure with a return value but don't need the value.";
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_HELPURL"] = "http://en.wikipedia.org/wiki/Control_flow";
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP"] = "of loop";
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out";
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration";
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["LANG_CONTROLS_FOREACH_HELPURL"] = "/reference/blocks/control.html#foreach";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_PREFIX"] = "for ";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_SUFFIX"] = " in list";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_TEXT"] = "for item in list";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_INLIST"] = "in list";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_ITEM"] = "for each";
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_VAR"] = "item";
Blockly.Msg["LANG_CONTROLS_FOREACH_TOOLTIP"] = "Runs the blocks in the 'do'  section for each item in ";
Blockly.Msg["LANG_CONTROLS_FORRANGE_HELPURL"] = "/reference/blocks/control.html#forrange";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_PREFIX"] = "for ";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_SUFFIX"] = " in range";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_TEXT"] = "for number in range";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_END"] = "to";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_ITEM"] = "for each";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_START"] = "from";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_STEP"] = "by";
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_VAR"] = "number";
Blockly.Msg["LANG_CONTROLS_FORRANGE_TOOLTIP"] = "Runs the blocks in the 'do' section for each numeric ";
Blockly.Msg["LANG_CONTROLS_FOR_HELPURL"] = "";
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_FROM"] = "from";
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_TO"] = "to";
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_VAR"] = "x";
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_WITH"] = "count with";
Blockly.Msg["LANG_CONTROLS_GET_HELPURL"] = "/reference/blocks/control.html#get";
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_COLLAPSED_TEXT"] = "get plain start text";
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_HELPURL"] = "/reference/blocks/control.html#getplainstarttext";
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE"] = "get plain start text";
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TOOLTIP"] = "Returns the plain text that was passed to this screen when ";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_COLLAPSED_TEXT"] = "get start value";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_HELPURL"] = "/reference/blocks/control.html#getstartvalue";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_SCREENNAME"] = "screenName";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE"] = "startValue";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TITLE"] = "get start value";
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TOOLTIP"] = "Returns the value that was passed to this screen when it ";
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "else if";
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TITLE_ELSE"] = "else";
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["LANG_CONTROLS_IF_HELPURL"] = "/reference/blocks/control.html#if";
Blockly.Msg["LANG_CONTROLS_IF_IF_TITLE_IF"] = "if";
Blockly.Msg["LANG_CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["LANG_CONTROLS_IF_MSG_IF"] = "if";
Blockly.Msg["LANG_CONTROLS_IF_MSG_THEN"] = "then";
Blockly.Msg["LANG_CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_COLLAPSED_TEXT"] = "open screen";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_HELPURL"] = "/reference/blocks/control.html#openscreen";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME"] = "screenName";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE"] = "open another screen";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TOOLTIP"] = "Opens a new screen in a multiple screen app.";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_COLLAPSED_TEXT"] = "open screen with value";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_HELPURL"] = "/reference/blocks/control.html#openscreenwithvalue";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_SCREENNAME"] = "screenName";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_STARTVALUE"] = "startValue";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE"] = "open another screen with start value";
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TOOLTIP"] = "Opens a new screen in a multiple screen app and passes the ";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_HELPURL"] = "/reference/blocks/control.html#while";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "until";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "while";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT"] = "repeat";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_1"] = "Runs the blocks in the 'do' section while the test is ";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["LANG_CONTROLS_WHILE_COLLAPSED_TEXT"] = "while";
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_DO"] = "do";
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_TEST"] = "test";
Blockly.Msg["LANG_CONTROLS_WHILE_TITLE"] = "while";
Blockly.Msg["LANG_CONTROLS_WHILE_TOOLTIP"] = "Runs the blocks in the 'do' section while the test is ";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_HELPURL"] = "/reference/blocks/lists.html#additems";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT"] = "add items to list list %1 item %2";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_ITEM"] = "item";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_LIST"] = " list";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TITLE_ADD"] = "add items to list";
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TOOLTIP"] = "Adds items to the end of a list.";
Blockly.Msg["LANG_LISTS_ADD_ITEM_HELPURL"] = "/reference/blocks/lists.html#additems";
Blockly.Msg["LANG_LISTS_ADD_ITEM_TITLE"] = "item";
Blockly.Msg["LANG_LISTS_ADD_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LANG_LISTS_APPEND_LIST_HELPURL"] = "/reference/blocks/lists.html#append";
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT"] = "append to list  list1 %1 list2 %2";
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST1"] = "list1";
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST2"] = "list2";
Blockly.Msg["LANG_LISTS_APPEND_LIST_TITLE_APPEND"] = "append to list";
Blockly.Msg["LANG_LISTS_APPEND_LIST_TOOLTIP"] = "Appends all the items in list2 onto the end of list1. After ";
Blockly.Msg["LANG_LISTS_COPY_HELPURL"] = "/reference/blocks/lists.html#copy";
Blockly.Msg["LANG_LISTS_COPY_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_COPY_TITLE_COPY"] = "copy list";
Blockly.Msg["LANG_LISTS_COPY_TOOLTIP"] = "Makes a copy of a list, including copying all sublists";
Blockly.Msg["LANG_LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LANG_LISTS_CREATE_WITH_EMPTY_HELPURL"] = "/reference/blocks/lists.html#makealist";
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TITLE"] = "item";
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST"] = "make a list";
Blockly.Msg["LANG_LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listfromcsvrow";
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV"] = "list from csv row";
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listfromcsvtable";
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV"] = "list from csv table";
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";
Blockly.Msg["LANG_LISTS_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_INSERT_INPUT"] = "insert list item  list %1 index %2 item %3";
Blockly.Msg["LANG_LISTS_INSERT_INPUT_INDEX"] = "index";
Blockly.Msg["LANG_LISTS_INSERT_INPUT_ITEM"] = "item";
Blockly.Msg["LANG_LISTS_INSERT_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_INSERT_ITEM_HELPURL"] = "/reference/blocks/lists.html#insert";
Blockly.Msg["LANG_LISTS_INSERT_TITLE_INSERT_LIST"] = "insert list item";
Blockly.Msg["LANG_LISTS_INSERT_TOOLTIP"] = "Insert an item into a list at the specified position.";
Blockly.Msg["LANG_LISTS_IS_EMPTY_HELPURL"] = "/reference/blocks/lists.html#islistempty";
Blockly.Msg["LANG_LISTS_IS_EMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LANG_LISTS_IS_IN_HELPURL"] = "/reference/blocks/lists.html#inlist";
Blockly.Msg["LANG_LISTS_IS_IN_INPUT"] = "is in list? thing %1 list %2";
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_THING"] = "thing";
Blockly.Msg["LANG_LISTS_IS_IN_TITLE_IS_IN"] = "is in list?";
Blockly.Msg["LANG_LISTS_IS_IN_TOOLTIP"] = "Returns true if the the thing is an item in the list, and ";
Blockly.Msg["LANG_LISTS_IS_LIST_HELPURL"] = "/reference/blocks/lists.html#isalist";
Blockly.Msg["LANG_LISTS_IS_LIST_INPUT_THING"] = "thing";
Blockly.Msg["LANG_LISTS_IS_LIST_TITLE_IS_LIST"] = "is a list?";
Blockly.Msg["LANG_LISTS_IS_LIST_TOOLTIP"] = "Tests if something is a list.";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_HELPURL"] = "/reference/blocks/lists.html#joinwithseparator";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT"] = "join items using separator %1 list %2";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_LIST"] = "list";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_SEPARATOR"] = "separator";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TITLE"] = "join with separator";
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TOOLTIP"] = "Returns text with list elements joined with separator";
Blockly.Msg["LANG_LISTS_LENGTH_HELPURL"] = "/reference/blocks/lists.html#lengthoflist";
Blockly.Msg["LANG_LISTS_LENGTH_INPUT"] = "length of list list %1";
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LENGTH"] = "length of list";
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_LENGTH_TOOLTIP"] = "Counts the number of items in a list.";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_HELPURL"] = "/reference/blocks/lists.html#lookuppairs";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT"] = "look up in pairs  key %1 pairs %2 notFound %3";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY"] = "key";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND"] = "notFound";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS"] = "pairs";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS"] = "look up in pairs";
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TOOLTIP"] = "Returns the value associated with the key in the list of pairs";
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_HELPURL"] = "/reference/blocks/lists.html#pickrandomitem";
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM"] = "pick a random item";
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TOOLTIP"] = "Pick an item at random from the list.";
Blockly.Msg["LANG_LISTS_POSITION_IN_HELPURL"] = "/reference/blocks/lists.html#indexinlist";
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT"] = "index in list  thing %1 list %2";
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_THING"] = "thing";
Blockly.Msg["LANG_LISTS_POSITION_IN_TITLE_POSITION"] = "index in list";
Blockly.Msg["LANG_LISTS_POSITION_IN_TOOLTIP"] = "Find the position of the thing in the list. If it's not in ";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_HELPURL"] = "/reference/blocks/lists.html#removeitem";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT"] = "remove list item  list %1 index %2";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_INDEX"] = "index";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE"] = "remove list item";
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TOOLTIP"] = "Removes the item at the specified position from the list.";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_HELPURL"] = "/reference/blocks/lists.html#replace";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT"] = "replace list item  list %1 index %2 replacement %3";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_INDEX"] = "index";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_REPLACEMENT"] = "replacement";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE"] = "replace list item";
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TOOLTIP"] = "Replaces the nth item in a list.";
Blockly.Msg["LANG_LISTS_REVERSE_HELPURL"] = "/reference/blocks/lists.html#reverse";
Blockly.Msg["LANG_LISTS_REVERSE_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_REVERSE_TITLE_REVERSE"] = "reverse list";
Blockly.Msg["LANG_LISTS_REVERSE_TOOLTIP"] = "Reverses the order of input list and returns it as a new list.";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT"] = "select list item  list %1 index %2";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_INDEX"] = "index";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_HELPURL"] = "/reference/blocks/lists.html#selectlistitem";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_SELECT"] = "select list item";
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TOOLTIP"] = "Returns the item at position index in the list.";
Blockly.Msg["LANG_LISTS_TITLE_IS_EMPTY"] = "is list empty?";
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listtocsvrow";
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV"] = "list to csv row";
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TOOLTIP"] = "Interprets the list as a row of a table and returns a CSV ";
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listtocsvtable";
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_INPUT_LIST"] = "list";
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV"] = "list to csv table";
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TOOLTIP"] = "Interprets the list as a table in row-major format and ";
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE_HELPURL"] = "/reference/blocks/logic.html#false";
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_FALSE"] = "Returns the boolean false.";
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_TRUE"] = "Returns the boolean true.";
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE_HELPURL"] = "/reference/blocks/logic.html#true";
Blockly.Msg["LANG_LOGIC_COMPARE_EQ"] = "=";
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL"] = "http://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_EQ"] = "/reference/blocks/logic.html#=";
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_NEQ"] = "/reference/blocks/logic.html#not=";
Blockly.Msg["LANG_LOGIC_COMPARE_NEQ"] = "≠";
Blockly.Msg["LANG_LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
Blockly.Msg["LANG_LOGIC_COMPARE_TRANSLATED_NAME"] = "logic equal";
Blockly.Msg["LANG_LOGIC_NEGATE_HELPURL"] = "/reference/blocks/logic.html#not";
Blockly.Msg["LANG_LOGIC_NEGATE_INPUT_NOT"] = "not";
Blockly.Msg["LANG_LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_AND"] = "/reference/blocks/logic.html#and";
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_OR"] = "/reference/blocks/logic.html#or";
Blockly.Msg["LANG_LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if all inputs are true.";
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if any input is true.";
Blockly.Msg["LANG_MATH_ARITHMETIC_ADD"] = "+";
Blockly.Msg["LANG_MATH_ARITHMETIC_DIVIDE"] = "/";
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_ADD"] = "/reference/blocks/math.html#add";
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_DIVIDE"] = "/reference/blocks/math.html#divide";
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MINUS"] = "/reference/blocks/math.html#subtract";
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MULTIPLY"] = "/reference/blocks/math.html#multiply";
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_POWER"] = "/reference/blocks/math.html#exponent";
Blockly.Msg["LANG_MATH_ARITHMETIC_MINUS"] = "-";
Blockly.Msg["LANG_MATH_ARITHMETIC_MULTIPLY"] = "*";
Blockly.Msg["LANG_MATH_ARITHMETIC_POWER"] = "^";
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
Blockly.Msg["LANG_MATH_BITWISE_AND"] = "bitwise and";
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_AND"] = "/reference/blocks/math.html#bitwise_and";
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_IOR"] = "/reference/blocks/math.html#bitwise_ior";
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_XOR"] = "/reference/blocks/math.html#bitwise_xor";
Blockly.Msg["LANG_MATH_BITWISE_IOR"] = "bitwise or";
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_AND"] = "Return the bitwise AND of the two numbers.";
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_IOR"] = "Return the bitwise inclusive OR of the two numbers.";
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_XOR"] = "Return the bitwise exclusive OR of the two numbers.";
Blockly.Msg["LANG_MATH_BITWISE_XOR"] = "bitwise xor";
Blockly.Msg["LANG_MATH_COMPARE_EQ"] = "=";
Blockly.Msg["LANG_MATH_COMPARE_GT"] = ">";
Blockly.Msg["LANG_MATH_COMPARE_GTE"] = "≥";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL"] = "";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_EQ"] = "/reference/blocks/math.html#=";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GT"] = "/reference/blocks/math.html#gt";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GTE"] = "/reference/blocks/math.html#gte";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LT"] = "/reference/blocks/math.html#lt";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LTE"] = "/reference/blocks/math.html#lte";
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_NEQ"] = "/reference/blocks/math.html#not=";
Blockly.Msg["LANG_MATH_COMPARE_LT"] = "<";
Blockly.Msg["LANG_MATH_COMPARE_LTE"] = "≤";
Blockly.Msg["LANG_MATH_COMPARE_NEQ"] = "≠";
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_EQ"] = "Return true if both numbers are equal to each other.";
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_NEQ"] = "Return true if both numbers are not equal to each other.";
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_DEG_TO_RAD"] = "/reference/blocks/math.html#convertdeg";
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_RAD_TO_DEG"] = "/reference/blocks/math.html#convertrad";
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_DEG_TO_RAD"] = "degrees to radians";
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_RAD_TO_DEG"] = "radians to degrees";
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_TITLE_CONVERT"] = "convert";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_BIN_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_BIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_HEX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_HEX_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_BIN_TO_DEC"] = "binary to base 10";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_BIN"] = "base 10 to binary";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_HEX"] = "base 10 to hex";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_HEX_TO_DEC"] = "hex to base 10";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TITLE_CONVERT"] = "convert number";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_BIN_TO_DEC"] = "Takes a string that represents a number in binary and returns the string that represents the number in base 10";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_BIN"] = "Takes a positive integer in base 10 and returns the string that represents the number in binary";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_HEX"] = "Takes a positive integer in base 10 and returns the string that represents the number in hexadecimal";
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_HEX_TO_DEC"] = "Takes a string that represents a number in hexadecimal and returns the string that represents the number in base 10";
Blockly.Msg["LANG_MATH_DIVIDE"] = "÷";
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_MODULO"] = "/reference/blocks/math.html#modulo";
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_QUOTIENT"] = "/reference/blocks/math.html#quotient";
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_REMAINDER"] = "/reference/blocks/math.html#remainder";
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_MODULO"] = "modulo of";
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_QUOTIENT"] = "quotient of";
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_REMAINDER"] = "remainder of";
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_MODULO"] = "Return the modulo.";
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_QUOTIENT"] = "Return the quotient.";
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_REMAINDER"] = "Return the remainder.";
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_HELPURL"] = "/reference/blocks/math.html#format";
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT"] = "format as decimal number %1 places %2";
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_NUM"] = "number";
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_PLACES"] = "places";
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_TITLE"] = "format as decimal";
Blockly.Msg["LANG_MATH_IS_A_BINARY_HELPURL"] = "/reference/blocks/math.html#isnumber";
Blockly.Msg["LANG_MATH_IS_A_BINARY_INPUT_NUM"] = "is binary?";
Blockly.Msg["LANG_MATH_IS_A_BINARY_TOOLTIP"] = "Tests if something is a string that represents a binary number.";
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_INPUT_NUM"] = "is Base 10?";
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_TOOLTIP"] = "Tests if something is a string that represents a positive base 10 integer.";
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_INPUT_NUM"] = "is hexadecimal?";
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_TOOLTIP"] = "Tests if something is a string that represents a hexadecimal number.";
Blockly.Msg["LANG_MATH_IS_A_NUMBER_HELPURL"] = "/reference/blocks/math.html#isnumber";
Blockly.Msg["LANG_MATH_IS_A_NUMBER_INPUT_NUM"] = "is number?";
Blockly.Msg["LANG_MATH_IS_A_NUMBER_TOOLTIP"] = "Tests if something is a number.";
Blockly.Msg["LANG_MATH_MUTATOR_ITEM_INPUT_NUMBER"] = "number";
Blockly.Msg["LANG_MATH_NUMBER_HELPURL"] = "/reference/blocks/math.html#number";
Blockly.Msg["LANG_MATH_NUMBER_TOOLTIP"] = "Report the number shown.";
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MAX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#max";
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#min";
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MAX"] = "max";
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MIN"] = "min";
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest of its arguments..";
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest of its arguments..";
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_HELPURL"] = "/reference/blocks/math.html#randomfrac";
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random number between 0 and 1.";
Blockly.Msg["LANG_MATH_RANDOM_INT_HELPURL"] = "/reference/blocks/math.html#randomint";
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT"] = "random integer from %1 to %2";
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_FROM"] = "from";
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_TO"] = "to";
Blockly.Msg["LANG_MATH_RANDOM_INT_TITLE_RANDOM"] = "random integer";
Blockly.Msg["LANG_MATH_RANDOM_SEED_HELPURL"] = "/reference/blocks/math.html#randomseed";
Blockly.Msg["LANG_MATH_RANDOM_SEED_INPUT_TO"] = "to";
Blockly.Msg["LANG_MATH_RANDOM_SEED_TITLE_RANDOM"] = "random set seed";
Blockly.Msg["LANG_MATH_ROUND_HELPURL_CEILING"] = "/reference/blocks/math.html#ceiling";
Blockly.Msg["LANG_MATH_ROUND_HELPURL_FLOOR"] = "/reference/blocks/math.html#floor";
Blockly.Msg["LANG_MATH_ROUND_HELPURL_ROUND"] = "/reference/blocks/math.html#round";
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_CEILING"] = "ceiling";
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_FLOOR"] = "floor";
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["LANG_MATH_ROUND_TOOLTIP_ROUND"] = "Round a number up or down.";
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ABS"] = "/reference/blocks/math.html#abs";
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_EXP"] = "/reference/blocks/math.html#e";
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_LN"] = "/reference/blocks/math.html#log";
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_NEG"] = "/reference/blocks/math.html#neg";
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ROOT"] = "/reference/blocks/math.html#sqrt";
Blockly.Msg["LANG_MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["LANG_MATH_SINGLE_OP_EXP"] = "e^";
Blockly.Msg["LANG_MATH_SINGLE_OP_LN"] = "log";
Blockly.Msg["LANG_MATH_SINGLE_OP_NEG"] = "neg";
Blockly.Msg["LANG_MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_EXP"] = "Return e (2.71828...) to the power of a number.";
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number, i.e. the logarithm to the base e (2.71828...)";
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
Blockly.Msg["LANG_MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["LANG_MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["LANG_MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["LANG_MATH_TRIG_ATAN2"] = "atan2";
Blockly.Msg["LANG_MATH_TRIG_ATAN2_X"] = "x";
Blockly.Msg["LANG_MATH_TRIG_ATAN2_Y"] = "y";
Blockly.Msg["LANG_MATH_TRIG_COS"] = "cos";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ACOS"] = "/reference/blocks/math.html#acos";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ASIN"] = "/reference/blocks/math.html#asin";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN"] = "/reference/blocks/math.html#atan";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN2"] = "/reference/blocks/math.html#atan2";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_COS"] = "/reference/blocks/math.html#cos";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_SIN"] = "/reference/blocks/math.html#sin";
Blockly.Msg["LANG_MATH_TRIG_HELPURL_TAN"] = "/reference/blocks/math.html#tan";
Blockly.Msg["LANG_MATH_TRIG_SIN"] = "sin";
Blockly.Msg["LANG_MATH_TRIG_TAN"] = "tan";
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_COS"] = "Provides the cosine of the given angle in degrees.";
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_SIN"] = "Provides the sine of the given angle in degrees.";
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_TAN"] = "Provides the tangent of the given angle in degrees.";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"] = "call ";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_COLLAPSED_PREFIX"] = "call ";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"] = "procedure";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TOOLTIP"] = "Call a procedure with no return value.";
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TRANSLATED_NAME"] = "call no return";
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_COLLAPSED_PREFIX"] = "call ";
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TOOLTIP"] = "Call a procedure with a return value.";
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TRANSLATED_NAME"] = "call return";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_COLLAPSED_PREFIX"] = "to ";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DEFINE"] = "to";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"] = "do";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"] = "procedure";
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_TOOLTIP"] = "A procedure that does not return a value.";
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_COLLAPSED_PREFIX"] = "to ";
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DEFINE"] = "to";
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_RETURN"] = "result";
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_TOOLTIP"] = "A procedure returning a result value.";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_COLLAPSED_TEXT"] = "do/result";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_DO"] = "do";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_HELPURL"] = "/reference/blocks/procedures.html#doreturn";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_RETURN"] = "result";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_THEN_RETURN"] = "result";
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";
Blockly.Msg["LANG_PROCEDURES_GET_HELPURL"] = "/reference/blocks/procedures.html#get";
Blockly.Msg["LANG_PROCEDURES_HIGHLIGHT_DEF"] = "Highlight Procedure";
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TITLE"] = "input:";
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TOOLTIP"] = "";
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "";
Blockly.Msg["LANG_TEXT_APPEND_APPENDTEXT"] = "append text";
Blockly.Msg["LANG_TEXT_APPEND_HELPURL"] = "http://www.liv.ac.uk/HPC/HTMLF90Course/HTMLF90CourseNotesnode91.html";
Blockly.Msg["LANG_TEXT_APPEND_TO"] = "to";
Blockly.Msg["LANG_TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["LANG_TEXT_APPEND_VARIABLE"] = "item";
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_DOWNCASE"] = "/reference/blocks/text.html#downcase";
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_UPPERCASE"] = "/reference/blocks/text.html#upcase";
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE"] = "downcase";
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "upcase";
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_DOWNCASE"] = "Returns a copy of its text string argument converted to lowercase.";
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_UPPERCASE"] = "Returns a copy of its text string argument converted to uppercase.";
Blockly.Msg["LANG_TEXT_COMPARE_EQUAL"] = " =";
Blockly.Msg["LANG_TEXT_COMPARE_GT"] = " >";
Blockly.Msg["LANG_TEXT_COMPARE_HELPURL"] = "/reference/blocks/text.html#compare";
Blockly.Msg["LANG_TEXT_COMPARE_INPUT_COMPARE"] = "compare texts";
Blockly.Msg["LANG_TEXT_COMPARE_LT"] = " <";
Blockly.Msg["LANG_TEXT_COMPARE_NEQ"] = " ≠";
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_EQUAL"] = "Tests whether text strings are identical, ie., have the same characters in the same order. This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text =.";
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_GT"] = "Reports whether text1 is lexicographically greater than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_LT"] = "Tests whether text1 is lexicographically less than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_NEQ"] = "Tests whether text strings are different, ie., don't have the same characters in the same order. This is different from ordinary ≠ in the case where the text strings are numbers: 123 and 0123 are text ≠ but are mathematically =.";
Blockly.Msg["LANG_TEXT_CONTAINS_HELPURL"] = "/reference/blocks/text.html#contains";
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT"] = "contains  text %1 piece %2";
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_CONTAINS"] = "contains";
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_PIECE"] = "piece";
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_TEXT_CONTAINS_TOOLTIP"] = "Tests whether the piece is contained in the text.";
Blockly.Msg["LANG_TEXT_ISEMPTY_HELPURL"] = "/reference/blocks/text.html#isempty";
Blockly.Msg["LANG_TEXT_ISEMPTY_INPUT_ISEMPTY"] = "is empty";
Blockly.Msg["LANG_TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the length of the ' + 'text is 0, false otherwise.";
Blockly.Msg["LANG_TEXT_JOIN_HELPURL"] = "/reference/blocks/text.html#join";
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TITLE_ITEM"] = "string";
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TOOLTIP"] = "";
Blockly.Msg["LANG_TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["LANG_TEXT_JOIN_TITLE_JOIN"] = "join";
Blockly.Msg["LANG_TEXT_JOIN_TOOLTIP"] = "Appends all the inputs to form a single text string. If there are no inputs, makes an empty text.";
Blockly.Msg["LANG_TEXT_LENGTH_HELPURL"] = "/reference/blocks/text.html#length";
Blockly.Msg["LANG_TEXT_LENGTH_INPUT_LENGTH"] = "length";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_HELPURL"] = "/reference/blocks/text.html#replaceall";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT"] = "replace all text %1 segment %2 replacement %3";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT"] = "replacement";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_SEGMENT"] = "segment";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TITLE_REPLACE_ALL"] = "replace all";
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TOOLTIP"] = "Returns a new text obtained by replacing all occurrences of the segment with the replacement.";
Blockly.Msg["LANG_TEXT_SEGMENT_AT_TOOLTIP"] = "Extracts the segment of the given length from the given text starting from the given text starting from the given position. Position 1 denotes the beginning of the text.";
Blockly.Msg["LANG_TEXT_SEGMENT_HELPURL"] = "/reference/blocks/text.html#segment";
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT"] = "segment  text %1 start %2 length %3";
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_LENGTH"] = "length";
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_START"] = "start";
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_TEXT_SEGMENT_TITLE_SEGMENT"] = "segment";
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_HELPURL"] = "/reference/blocks/text.html#splitspaces";
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_TITLE"] = "split at spaces";
Blockly.Msg["LANG_TEXT_SPLIT_AT_TOOLTIP"] = "Split the text into pieces separated by spaces.";
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL"] = "";
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT"] = "/reference/blocks/text.html#split";
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_ANY"] = "/reference/blocks/text.html#splitatany";
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST"] = "/reference/blocks/text.html#splitat";
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST_OF_ANY"] = "/reference/blocks/text.html#splitatfirstofany";
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT"] = "at";
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT_LIST"] = "at (list)";
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT"] = "split";
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY"] = "split at any";
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST"] = "split at first";
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY"] = "split at first of any";
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT"] = "Divides text into pieces using the text 'at' as the dividing points and produces a list of the results.   Splitting 'one,two,three,four' at ',' (comma) returns the list '(one two three four)'.  Splitting 'one-potato,two-potato,three-potato,four' at '-potato', returns the list '(one two three four)'.";
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_ANY"] = "Divides the given text into a list, using any of the items in the list 'at' as the  dividing point, and returns a list of the results.  Splitting 'appleberry,banana,cherry,dogfood' with 'at' as the two-element list whose  first item is a comma and whose second item is 'rry' returns a list of four items:  '(applebe banana che dogfood)'.";
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST"] = "Divides the given text into two pieces using the location of the first occurrence of  the text 'at' as the dividing point, and returns a two-item list consisting of the piece  before the dividing point and the piece after the dividing point.  Splitting 'apple,banana,cherry,dogfood' with a comma as the splitting point  returns a list of two items: the first is the text 'apple' and the second is the text  'banana,cherry,dogfood'.  Notice that the comma after 'apple' does not appear in the result,  because that is the dividing point.";
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST_OF_ANY"] = "Divides the given text into a two-item list, using the first location of any item  in the list 'at' as the dividing point. Splitting 'I love apples bananas apples grapes' by the list '(ba,ap)' returns  a list of two items, the first being 'I love' and the second being  'ples bananas apples grapes.'";
Blockly.Msg["LANG_TEXT_STARTS_AT_HELPURL"] = "/reference/blocks/text.html#startsat";
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT"] = "starts at  text %1 piece %2";
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_PIECE"] = "piece";
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_STARTS_AT"] = "starts at";
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_TEXT"] = "text";
Blockly.Msg["LANG_TEXT_STARTS_AT_TOOLTIP"] = "Returns the starting index of the piece in the text. where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.";
Blockly.Msg["LANG_TEXT_TEXT_HELPURL"] = "/reference/blocks/text.html#string";
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_HELPURL"] = "/reference/blocks/text.html#isstring";
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_INPUT_THING"] = "thing";
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TITLE"] = "is a string?";
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TOOLTIP"] = "Returns true if <code>thing</code> is a string.";
Blockly.Msg["LANG_TEXT_TEXT_LEFT_QUOTE"] = "“";
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE"] = "Obfuscated Text";
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE_HELPURL"] = "/reference/blocks/text.html#obfuscatetext";
Blockly.Msg["LANG_TEXT_TEXT_RIGHT_QUOTE"] = "”";
Blockly.Msg["LANG_TEXT_TEXT_TOOLTIP"] = "A text string.";
Blockly.Msg["LANG_TEXT_TRIM_HELPURL"] = "/reference/blocks/text.html#trim";
Blockly.Msg["LANG_TEXT_TRIM_TITLE_TRIM"] = "trim";
Blockly.Msg["LANG_TEXT_TRIM_TOOLTIP"] = "Returns a copy of its text string arguments with any leading or trailing spaces removed.";
Blockly.Msg["LANG_VARIABLES_GET_COLLAPSED_TEXT"] = "get";
Blockly.Msg["LANG_VARIABLES_GET_HELPURL"] = "/reference/blocks/variables.html#get";
Blockly.Msg["LANG_VARIABLES_GET_TITLE_GET"] = "get";
Blockly.Msg["LANG_VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_COLLAPSED_TEXT"] = "global";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#global";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_NAME"] = "name";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT"] = "initialize global";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TO"] = "to";
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TOOLTIP"] = "Creates a global variable and gives it the value of the attached blocks.";
Blockly.Msg["LANG_VARIABLES_GLOBAL_PREFIX"] = "global";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_COLLAPSED_TEXT"] = "local";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_DEFAULT_NAME"] = "name";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_COLLAPSED_TEXT"] = "local";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_HELPURL"] = "/reference/blocks/variables.html#return";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_IN_RETURN"] = "in";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TOOLTIP"] = "Allows you to create variables that are only accessible in the return part of this block.";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TRANSLATED_NAME"] = "initialize local in return";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#do";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_INPUT_TO"] = "to";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_IN_DO"] = "in";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT"] = "initialize local";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TOOLTIP"] = "Allows you to create variables that are only accessible in the do part of this block.";
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TRANSLATED_NAME"] = "initialize local in do";
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_DEFAULT_VARIABLE"] = "x";
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_TITLE_NAME"] = "name";
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TITLE_LOCAL_NAMES"] = "local names";
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TOOLTIP"] = "";
Blockly.Msg["LANG_VARIABLES_SET_COLLAPSED_TEXT"] = "set";
Blockly.Msg["LANG_VARIABLES_SET_HELPURL"] = "/reference/blocks/variables.html#set";
Blockly.Msg["LANG_VARIABLES_SET_TITLE_SET"] = "set";
Blockly.Msg["LANG_VARIABLES_SET_TITLE_TO"] = "to";
Blockly.Msg["LANG_VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["LANG_VARIABLES_VARIABLE"] = " variable";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
Blockly.Msg["LISTS_INLIST"] = "in list";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
Blockly.Msg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "change %1 by %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
Blockly.Msg["MATH_IS_EVEN"] = "is even";
Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
Blockly.Msg["MATH_IS_ODD"] = "is odd";
Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
Blockly.Msg["MATH_IS_PRIME"] = "is prime";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
Blockly.Msg["NEW_VARIABLE"] = "New variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "to";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
Blockly.Msg["PROCEDURE_CATEGORY"] = "Procedures";
Blockly.Msg["REDO"] = "Redo";
Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
Blockly.Msg["REMOVE_FROM_BACKPACK"] = "Remove from Backpack";
Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE"] = "Your Companion App is out of date. Click 'OK' to start the update. Watch your ";
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE2"] = "Your Companion App is out of date. Restart the Companion and use it to scan the QRCode below in order to update";
Blockly.Msg["REPL_EMULATOR_ONLY"] = "You can only use this option to update the Emulator";
Blockly.Msg["REPL_FACTORY_RESET"] = "This will attempt to reset your Emulator to its 'factory' state. If you had previously updated the Companion installed in the Emulator, you will likely have to do this again.";
Blockly.Msg["REPL_HELPER_NOT_RUNNING"] = "The aiStarter helper does not appear to be running<br /><a href='http://appinventor.mit.edu' target='_blank'>Need Help?</a>";
Blockly.Msg["REPL_UPDATE_INFO"] = "The update is now being installed on your device. Watch your device (or emulator) screen and approve the software installation when prompted.<br /><br />IMPORTANT: When the update finishes, choose 'DONE' (don't click 'open'). Then go to App Inventor in your web browser, click the 'Connect' menu and choose 'Reset Connection'.  Then reconnect the device.";
Blockly.Msg["SHOW"] = "Show Workspace Controls";
Blockly.Msg["SHOW_ALL_COMMENTS"] = "Show All Comments";
Blockly.Msg["SORT_C"] = "Sort Blocks by Category";
Blockly.Msg["SORT_H"] = "Sort Blocks by Height";
Blockly.Msg["SORT_W"] = "Sort Blocks by Width";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg["TODAY"] = "Today";
Blockly.Msg["UNDO"] = "Undo";
Blockly.Msg["UNGENERICIZE_BLOCK"] = "Make Specific";
Blockly.Msg["UNNAMED_KEY"] = "unnamed";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
Blockly.Msg["VARIABLE_CATEGORY"] = "Variables";
Blockly.Msg["VERTICAL_PARAMETERS"] = "Arrange Parameters Vertically";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_CALL"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";