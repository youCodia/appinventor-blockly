// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Ajouter un commentaire";
Blockly.Msg["ARRANGE_H"] = "Arrange Blocks Horizontally";  // untranslated
Blockly.Msg["ARRANGE_S"] = "Arrange Blocks Diagonally";  // untranslated
Blockly.Msg["ARRANGE_V"] = "Arrange Blocks Vertically";  // untranslated
Blockly.Msg["BACKPACK_CONFIRM_EMPTY"] = "Are you sure you want to empty the backpack?";  // untranslated
Blockly.Msg["BACKPACK_EMPTY"] = "Empty the Backpack";  // untranslated
Blockly.Msg["BACKPACK_GET"] = "Paste All Blocks from Backpack";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Impossible de supprimer la variable '%1' parce qu’elle fait partie de la définition de la fonction '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Modifier la valeur :";
Blockly.Msg["CLEAN_UP"] = "Nettoyer les blocs";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Les blocs repliés contiennent des avertissements.";
Blockly.Msg["COLLAPSE_ALL"] = "Réduire les blocs";
Blockly.Msg["COLLAPSE_BLOCK"] = "Réduire le bloc";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "couleur 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "couleur 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "taux";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "mélanger";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Mélange deux couleurs dans une proportion donnée (de 0.0 à 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://fr.wikipedia.org/wiki/Couleur";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choisir une couleur dans la palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "couleur aléatoire";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choisir une couleur au hasard.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "bleu";
Blockly.Msg["COLOUR_RGB_GREEN"] = "vert";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_RED"] = "rouge";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colorier en";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Créer une couleur avec la quantité spécifiée de rouge, vert et bleu. Les valeurs doivent être comprises entre 0 et 100.";
Blockly.Msg["CONFIRM_DELETE"] = "Confirm deletion";  // untranslated
Blockly.Msg["CONNECT_TO_DO_IT"] = "You must be connected to the companion or emulator to use 'Do It'";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "quitter la boucle";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "passer à l’itération de boucle suivante";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Sortir de la boucle englobante.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Sauter le reste de cette boucle, et poursuivre avec l’itération suivante.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Attention : Ce bloc ne devrait être utilisé que dans une boucle.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "pour chaque élément %1 dans la liste %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Pour chaque élément d’une liste, assigner la valeur de l’élément à la variable '%1', puis exécuter des instructions.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "compter avec %1 de %2 à %3 par %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Faire prendre à la variable « %1 » les valeurs depuis le nombre de début jusqu’au nombre de fin, en s’incrémentant du pas spécifié, et exécuter les instructions spécifiées.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Ajouter une condition au bloc si.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Ajouter une condition finale fourre-tout au bloc si.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Ajouter, supprimer ou réordonner les sections pour reconfigurer ce bloc si.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "sinon";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "sinon si";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "si";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Si une valeur est vraie, alors exécuter certains ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Si une valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, exécuter le second bloc d’ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres. Si aucune des valeurs n’est vraie, exécuter le dernier bloc d’ordres.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "http://fr.wikipedia.org/wiki/Boucle_for";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "faire";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "répéter %1 fois";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Exécuter des instructions plusieurs fois.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "répéter jusqu’à";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "répéter tant que";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Tant qu’une valeur est fausse, alors exécuter des instructions.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Tant qu’une valeur est vraie, alors exécuter des instructions.";
Blockly.Msg["COPY_ALLBLOCKS"] = "Copy All Blocks to Backpack";  // untranslated
Blockly.Msg["COPY_TO_BACKPACK"] = "Add to Backpack";  // untranslated
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Supprimer ces %1 blocs ?";
Blockly.Msg["DELETE_BLOCK"] = "Supprimer le bloc";
Blockly.Msg["DELETE_VARIABLE"] = "Supprimer la variable '%1'";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Supprimer %1 utilisations de la variable '%2' ?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Supprimer %1 blocs";
Blockly.Msg["DIALOG_ENTER_VALUES"] = "Enter values for:";  // untranslated
Blockly.Msg["DIALOG_SUBMIT"] = "Submit";  // untranslated
Blockly.Msg["DIALOG_UNBOUND_VAR"] = "Unbound Variables";  // untranslated
Blockly.Msg["DISABLE_ALL_BLOCKS"] = "Disable All Blocks";  // untranslated
Blockly.Msg["DISABLE_BLOCK"] = "Désactiver le bloc";
Blockly.Msg["DISABLE_GRID"] = "Disable Workspace Grid";  // untranslated
Blockly.Msg["DISABLE_SNAPPING"] = "Disable Snap to Grid";  // untranslated
Blockly.Msg["DOWNLOAD_BLOCKS_AS_PNG"] = "Download Blocks as PNG";  // untranslated
Blockly.Msg["DO_IT_DISCONNECTED"] = "Do It (Companion not connected)";  // untranslated
Blockly.Msg["DUPLICATE_BLOCK"] = "Dupliquer";
Blockly.Msg["DUPLICATE_COMMENT"] = "Dupliquer le commentaire";
Blockly.Msg["ENABLE_ALL_BLOCKS"] = "Enable All Blocks";  // untranslated
Blockly.Msg["ENABLE_BLOCK"] = "Activer le bloc";
Blockly.Msg["ENABLE_GRID"] = "Enable Workspace Grid";  // untranslated
Blockly.Msg["ENABLE_SNAPPING"] = "Enable Snap to Grid";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "Développer les blocs";
Blockly.Msg["EXPAND_BLOCK"] = "Développer le bloc";
Blockly.Msg["EXPORT_IMAGE"] = "Download Blocks as Image";  // untranslated
Blockly.Msg["EXTERNAL_INPUTS"] = "Entrées externes";
Blockly.Msg["GENERICIZE_BLOCK"] = "Make Generic";  // untranslated
Blockly.Msg["HELP"] = "Aide";
Blockly.Msg["HIDE"] = "Hide Workspace Controls";  // untranslated
Blockly.Msg["HIDE_ALL_COMMENTS"] = "Hide All Comments";  // untranslated
Blockly.Msg["HORIZONTAL_PARAMETERS"] = "Arrange Parameters Horizontally";  // untranslated
Blockly.Msg["INLINE_INPUTS"] = "Entrées en ligne";
Blockly.Msg["IOS_CANCEL"] = "Annuler";
Blockly.Msg["IOS_ERROR"] = "Erreur";
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Ajouter une entrée";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Ordres autorisés";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Cette fonction a des entrées dupliquées.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "ENTRÉES";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Ajouter";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Ajouter une variable";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Supprimer";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Vous ne pouvez pas utiliser un nom de variable vide.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Renommer";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Nom de la variable";
Blockly.Msg["LANG_CATEGORY_CONTROLS"] = "Control";  // untranslated
Blockly.Msg["LANG_CATEGORY_LISTS"] = "Lists";  // untranslated
Blockly.Msg["LANG_CATEGORY_LOGIC"] = "Logic";  // untranslated
Blockly.Msg["LANG_CATEGORY_MATH"] = "Math";  // untranslated
Blockly.Msg["LANG_CATEGORY_TEXT"] = "Text";  // untranslated
Blockly.Msg["LANG_COLOUR_BLACK"] = "black";  // untranslated
Blockly.Msg["LANG_COLOUR_BLUE"] = "blue";  // untranslated
Blockly.Msg["LANG_COLOUR_CYAN"] = "cyan";  // untranslated
Blockly.Msg["LANG_COLOUR_DARK_GRAY"] = "dark gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GRAY"] = "gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GREEN"] = "green";  // untranslated
Blockly.Msg["LANG_COLOUR_LIGHT_GRAY"] = "light gray";  // untranslated
Blockly.Msg["LANG_COLOUR_MAGENTA"] = "magenta";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR"] = "make color";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR_HELPURL"] = "/reference/blocks/colors.html#make";  // untranslated
Blockly.Msg["LANG_COLOUR_ORANGE"] = "orange";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_HELPURL"] = "/reference/blocks/colors.html#basic";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_TOOLTIP"] = "Click the square to pick a color.";  // untranslated
Blockly.Msg["LANG_COLOUR_PINK"] = "pink";  // untranslated
Blockly.Msg["LANG_COLOUR_RED"] = "red";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR"] = "split color";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR_HELPURL"] = "/reference/blocks/colors.html#split";  // untranslated
Blockly.Msg["LANG_COLOUR_WHITE"] = "white";  // untranslated
Blockly.Msg["LANG_COLOUR_YELLOW"] = "yellow";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_METHODS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_EVENTS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_METHODS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_EVENTS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_METHODS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_EVENTS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_METHODS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_EVENTS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_METHODS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_EVENTS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_METHODS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_EVENTS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_METHODS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_METHODS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_DATEPICKER_HELPURL"] = "/reference/components/userinterface.html#DatePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_METHODS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_EVENTS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_METHODS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_PROPERTIES_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_EVENTS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_METHODS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_PROPERTIES_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE"] = "when any ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT"] = "for component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HORIZARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#HorizontalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_EVENTS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_METHODS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_PROPERTIES_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_EVENTS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_METHODS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_PROPERTIES_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_METHODS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_METHODS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_METHODS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTVIEW_HELPURL"] = "/reference/components/userinterface.html#ListView";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_METHODS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_METHODS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_METHODS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_METHODS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_EVENTS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_METHODS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_EVENTS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_METHODS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_PROPERTIES_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_EVENTS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_METHODS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPINNER_HELPURL"] = "/reference/components/userinterface.html#Spinner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SWITCH_HELPURL"] = "/reference/components/userinterface.html#Switch";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TABLEARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#TableArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_EVENTS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_METHODS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_PROPERTIES_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_EVENTS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_METHODS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_PROPERTIES_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TIMEPICKER_HELPURL"] = "/reference/components/userinterface.html#TimePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_DO"] = "do";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_WHEN"] = "when ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_EVENTS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_METHODS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_PROPERTIES_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VERTARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#VerticalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_METHODS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_EVENTS_HELPURL"] = "/reference/components/internal.html#votingevents";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_METHODS_HELPURL"] = "/reference/components/internal.html#votingmethods";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_PROPERTIES_HELPURL"] = "/reference/components/internal.html#votingproperties";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_METHODS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_EVENTS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_METHODS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_COLLAPSED_TEXT"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_HELPURL"] = "/reference/blocks/control.html#break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_INPUT_TEXT"] = "value";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_TITLE"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_HELPURL"] = "/reference/blocks/control.html#choose";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_ELSE_RETURN"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_TEST"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_THEN_RETURN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TITLE"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TOOLTIP"] = "If the condition being tested is true,";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_COLLAPSED_TEXT"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TITLE"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TOOLTIP"] = "Closes all screens in this app and stops the app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TITLE"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TOOLTIP"] = "Close the current screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_COLLAPSED_TEXT"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_HELPURL"] = "/reference/blocks/control.html#closescreenwithplaintext";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TOOLTIP"] = "Closes the current screen and returns text to the app that ";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_COLLAPSED_TEXT"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_INPUT_RESULT"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TOOLTIP"] = "Closes the current screen and returns a result to the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_HELPURL"] = "/reference/blocks/control.html#doreturn";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TITLE"] = "do result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_COLLAPSED_TEXT"] = "eval but ignore";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_HELPURL"] = "/reference/blocks/control.html#evaluate";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE"] = "evaluate but ignore result";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TOOLTIP"] = "Runs the connected block of code and ignores the return value (if any). Useful if need to call a procedure with a return value but don't need the value.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_HELPURL"] = "http://en.wikipedia.org/wiki/Control_flow";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP"] = "of loop";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_HELPURL"] = "/reference/blocks/control.html#foreach";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_SUFFIX"] = " in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_TEXT"] = "for item in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_INLIST"] = "in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_VAR"] = "item";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_TOOLTIP"] = "Runs the blocks in the 'do'  section for each item in ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_HELPURL"] = "/reference/blocks/control.html#forrange";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_SUFFIX"] = " in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_TEXT"] = "for number in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_END"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_START"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_STEP"] = "by";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_VAR"] = "number";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_TOOLTIP"] = "Runs the blocks in the 'do' section for each numeric ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_VAR"] = "x";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_WITH"] = "count with";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_HELPURL"] = "/reference/blocks/control.html#get";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_COLLAPSED_TEXT"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_HELPURL"] = "/reference/blocks/control.html#getplainstarttext";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TOOLTIP"] = "Returns the plain text that was passed to this screen when ";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_COLLAPSED_TEXT"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_HELPURL"] = "/reference/blocks/control.html#getstartvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TITLE"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TOOLTIP"] = "Returns the value that was passed to this screen when it ";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TITLE_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_HELPURL"] = "/reference/blocks/control.html#if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TITLE_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_THEN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_COLLAPSED_TEXT"] = "open screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_HELPURL"] = "/reference/blocks/control.html#openscreen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE"] = "open another screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TOOLTIP"] = "Opens a new screen in a multiple screen app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_COLLAPSED_TEXT"] = "open screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_HELPURL"] = "/reference/blocks/control.html#openscreenwithvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE"] = "open another screen with start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TOOLTIP"] = "Opens a new screen in a multiple screen app and passes the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_HELPURL"] = "/reference/blocks/control.html#while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "until";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT"] = "repeat";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_1"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_COLLAPSED_TEXT"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_TEST"] = "test";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TITLE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TOOLTIP"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT"] = "add items to list list %1 item %2";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_LIST"] = " list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TITLE_ADD"] = "add items to list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TOOLTIP"] = "Adds items to the end of a list.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_HELPURL"] = "/reference/blocks/lists.html#append";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT"] = "append to list  list1 %1 list2 %2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST1"] = "list1";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST2"] = "list2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TITLE_APPEND"] = "append to list";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TOOLTIP"] = "Appends all the items in list2 onto the end of list1. After ";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_HELPURL"] = "/reference/blocks/lists.html#copy";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TITLE_COPY"] = "copy list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TOOLTIP"] = "Makes a copy of a list, including copying all sublists";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_EMPTY_TITLE"] = "create empty list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_EMPTY_HELPURL"] = "/reference/blocks/lists.html#makealist";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST"] = "make a list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listfromcsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV"] = "list from csv row";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listfromcsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV"] = "list from csv table";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT"] = "insert list item  list %1 index %2 item %3";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_ITEM_HELPURL"] = "/reference/blocks/lists.html#insert";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TITLE_INSERT_LIST"] = "insert list item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TOOLTIP"] = "Insert an item into a list at the specified position.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_HELPURL"] = "/reference/blocks/lists.html#islistempty";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_TOOLTIP"] = "Returns true if the list is empty.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_HELPURL"] = "/reference/blocks/lists.html#inlist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT"] = "is in list? thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TITLE_IS_IN"] = "is in list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TOOLTIP"] = "Returns true if the the thing is an item in the list, and ";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_HELPURL"] = "/reference/blocks/lists.html#isalist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TITLE_IS_LIST"] = "is a list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TOOLTIP"] = "Tests if something is a list.";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_HELPURL"] = "/reference/blocks/lists.html#joinwithseparator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT"] = "join items using separator %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_SEPARATOR"] = "separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TITLE"] = "join with separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TOOLTIP"] = "Returns text with list elements joined with separator";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_HELPURL"] = "/reference/blocks/lists.html#lengthoflist";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT"] = "length of list list %1";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LENGTH"] = "length of list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_TOOLTIP"] = "Counts the number of items in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_HELPURL"] = "/reference/blocks/lists.html#lookuppairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT"] = "look up in pairs  key %1 pairs %2 notFound %3";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY"] = "key";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND"] = "notFound";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS"] = "pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS"] = "look up in pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TOOLTIP"] = "Returns the value associated with the key in the list of pairs";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_HELPURL"] = "/reference/blocks/lists.html#pickrandomitem";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM"] = "pick a random item";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TOOLTIP"] = "Pick an item at random from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_HELPURL"] = "/reference/blocks/lists.html#indexinlist";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT"] = "index in list  thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TITLE_POSITION"] = "index in list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TOOLTIP"] = "Find the position of the thing in the list. If it's not in ";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_HELPURL"] = "/reference/blocks/lists.html#removeitem";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT"] = "remove list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE"] = "remove list item";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TOOLTIP"] = "Removes the item at the specified position from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_HELPURL"] = "/reference/blocks/lists.html#replace";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT"] = "replace list item  list %1 index %2 replacement %3";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE"] = "replace list item";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TOOLTIP"] = "Replaces the nth item in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_HELPURL"] = "/reference/blocks/lists.html#reverse";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TITLE_REVERSE"] = "reverse list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TOOLTIP"] = "Reverses the order of input list and returns it as a new list.";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT"] = "select list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_HELPURL"] = "/reference/blocks/lists.html#selectlistitem";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_SELECT"] = "select list item";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TOOLTIP"] = "Returns the item at position index in the list.";  // untranslated
Blockly.Msg["LANG_LISTS_TITLE_IS_EMPTY"] = "is list empty?";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listtocsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV"] = "list to csv row";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TOOLTIP"] = "Interprets the list as a row of a table and returns a CSV ";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listtocsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV"] = "list to csv table";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TOOLTIP"] = "Interprets the list as a table in row-major format and ";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE"] = "false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE_HELPURL"] = "/reference/blocks/logic.html#false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_FALSE"] = "Returns the boolean false.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_TRUE"] = "Returns the boolean true.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE"] = "true";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE_HELPURL"] = "/reference/blocks/logic.html#true";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL"] = "http://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_EQ"] = "/reference/blocks/logic.html#=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_NEQ"] = "/reference/blocks/logic.html#not=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TRANSLATED_NAME"] = "logic equal";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_HELPURL"] = "/reference/blocks/logic.html#not";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_INPUT_NOT"] = "not";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_AND"] = "and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_AND"] = "/reference/blocks/logic.html#and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_OR"] = "/reference/blocks/logic.html#or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_OR"] = "or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if all inputs are true.";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if any input is true.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_ADD"] = "+";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_DIVIDE"] = "/";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_ADD"] = "/reference/blocks/math.html#add";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_DIVIDE"] = "/reference/blocks/math.html#divide";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MINUS"] = "/reference/blocks/math.html#subtract";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MULTIPLY"] = "/reference/blocks/math.html#multiply";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_POWER"] = "/reference/blocks/math.html#exponent";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MINUS"] = "-";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MULTIPLY"] = "*";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_POWER"] = "^";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_AND"] = "bitwise and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_AND"] = "/reference/blocks/math.html#bitwise_and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_IOR"] = "/reference/blocks/math.html#bitwise_ior";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_XOR"] = "/reference/blocks/math.html#bitwise_xor";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_IOR"] = "bitwise or";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_AND"] = "Return the bitwise AND of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_IOR"] = "Return the bitwise inclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_XOR"] = "Return the bitwise exclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_XOR"] = "bitwise xor";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GT"] = ">";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GTE"] = "≥";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_EQ"] = "/reference/blocks/math.html#=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GT"] = "/reference/blocks/math.html#gt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GTE"] = "/reference/blocks/math.html#gte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LT"] = "/reference/blocks/math.html#lt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LTE"] = "/reference/blocks/math.html#lte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_NEQ"] = "/reference/blocks/math.html#not=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LT"] = "<";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LTE"] = "≤";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_EQ"] = "Return true if both numbers are equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_NEQ"] = "Return true if both numbers are not equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_DEG_TO_RAD"] = "/reference/blocks/math.html#convertdeg";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_RAD_TO_DEG"] = "/reference/blocks/math.html#convertrad";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_DEG_TO_RAD"] = "degrees to radians";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_RAD_TO_DEG"] = "radians to degrees";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_TITLE_CONVERT"] = "convert";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_BIN_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_BIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_HEX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_HEX_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_BIN_TO_DEC"] = "binary to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_BIN"] = "base 10 to binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_HEX"] = "base 10 to hex";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_HEX_TO_DEC"] = "hex to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TITLE_CONVERT"] = "convert number";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_BIN_TO_DEC"] = "Takes a string that represents a number in binary and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_BIN"] = "Takes a positive integer in base 10 and returns the string that represents the number in binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_HEX"] = "Takes a positive integer in base 10 and returns the string that represents the number in hexadecimal";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_HEX_TO_DEC"] = "Takes a string that represents a number in hexadecimal and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE"] = "÷";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_MODULO"] = "/reference/blocks/math.html#modulo";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_QUOTIENT"] = "/reference/blocks/math.html#quotient";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_REMAINDER"] = "/reference/blocks/math.html#remainder";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_MODULO"] = "modulo of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_QUOTIENT"] = "quotient of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_REMAINDER"] = "remainder of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_MODULO"] = "Return the modulo.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_QUOTIENT"] = "Return the quotient.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_REMAINDER"] = "Return the remainder.";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_HELPURL"] = "/reference/blocks/math.html#format";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT"] = "format as decimal number %1 places %2";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_NUM"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_PLACES"] = "places";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_TITLE"] = "format as decimal";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_INPUT_NUM"] = "is binary?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_TOOLTIP"] = "Tests if something is a string that represents a binary number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_INPUT_NUM"] = "is Base 10?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_TOOLTIP"] = "Tests if something is a string that represents a positive base 10 integer.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_INPUT_NUM"] = "is hexadecimal?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_TOOLTIP"] = "Tests if something is a string that represents a hexadecimal number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_INPUT_NUM"] = "is number?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_TOOLTIP"] = "Tests if something is a number.";  // untranslated
Blockly.Msg["LANG_MATH_MUTATOR_ITEM_INPUT_NUMBER"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_HELPURL"] = "/reference/blocks/math.html#number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_TOOLTIP"] = "Report the number shown.";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MAX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MAX"] = "max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MIN"] = "min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_HELPURL"] = "/reference/blocks/math.html#randomfrac";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random number between 0 and 1.";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_HELPURL"] = "/reference/blocks/math.html#randomint";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT"] = "random integer from %1 to %2";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_TITLE_RANDOM"] = "random integer";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_HELPURL"] = "/reference/blocks/math.html#randomseed";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_TITLE_RANDOM"] = "random set seed";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_CEILING"] = "/reference/blocks/math.html#ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_FLOOR"] = "/reference/blocks/math.html#floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_ROUND"] = "/reference/blocks/math.html#round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_CEILING"] = "ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_FLOOR"] = "floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_ROUND"] = "round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_TOOLTIP_ROUND"] = "Round a number up or down.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ABS"] = "/reference/blocks/math.html#abs";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_EXP"] = "/reference/blocks/math.html#e";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_LN"] = "/reference/blocks/math.html#log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_NEG"] = "/reference/blocks/math.html#neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ROOT"] = "/reference/blocks/math.html#sqrt";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ABSOLUTE"] = "absolute";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_EXP"] = "e^";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_LN"] = "log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_NEG"] = "neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ROOT"] = "square root";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_EXP"] = "Return e (2.71828...) to the power of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number, i.e. the logarithm to the base e (2.71828...)";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2"] = "atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_X"] = "x";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_Y"] = "y";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ACOS"] = "/reference/blocks/math.html#acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ASIN"] = "/reference/blocks/math.html#asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN"] = "/reference/blocks/math.html#atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN2"] = "/reference/blocks/math.html#atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_COS"] = "/reference/blocks/math.html#cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_SIN"] = "/reference/blocks/math.html#sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_TAN"] = "/reference/blocks/math.html#tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_COS"] = "Provides the cosine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_SIN"] = "Provides the sine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_TAN"] = "Provides the tangent of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TOOLTIP"] = "Call a procedure with no return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TRANSLATED_NAME"] = "call no return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TOOLTIP"] = "Call a procedure with a return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TRANSLATED_NAME"] = "call return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_TOOLTIP"] = "A procedure that does not return a value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_TOOLTIP"] = "A procedure returning a result value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_HELPURL"] = "/reference/blocks/procedures.html#doreturn";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_THEN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_GET_HELPURL"] = "/reference/blocks/procedures.html#get";  // untranslated
Blockly.Msg["LANG_PROCEDURES_HIGHLIGHT_DEF"] = "Highlight Procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TITLE"] = "input:";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_APPENDTEXT"] = "append text";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_HELPURL"] = "http://www.liv.ac.uk/HPC/HTMLF90Course/HTMLF90CourseNotesnode91.html";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TO"] = "to";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_VARIABLE"] = "item";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_DOWNCASE"] = "/reference/blocks/text.html#downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_UPPERCASE"] = "/reference/blocks/text.html#upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE"] = "downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_DOWNCASE"] = "Returns a copy of its text string argument converted to lowercase.";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_UPPERCASE"] = "Returns a copy of its text string argument converted to uppercase.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_EQUAL"] = " =";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_GT"] = " >";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_HELPURL"] = "/reference/blocks/text.html#compare";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_INPUT_COMPARE"] = "compare texts";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_LT"] = " <";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_NEQ"] = " ≠";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_EQUAL"] = "Tests whether text strings are identical, ie., have the same characters in the same order. This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text =.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_GT"] = "Reports whether text1 is lexicographically greater than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_LT"] = "Tests whether text1 is lexicographically less than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_NEQ"] = "Tests whether text strings are different, ie., don't have the same characters in the same order. This is different from ordinary ≠ in the case where the text strings are numbers: 123 and 0123 are text ≠ but are mathematically =.";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_HELPURL"] = "/reference/blocks/text.html#contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT"] = "contains  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_CONTAINS"] = "contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_TOOLTIP"] = "Tests whether the piece is contained in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_HELPURL"] = "/reference/blocks/text.html#isempty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_INPUT_ISEMPTY"] = "is empty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the length of the ' + 'text is 0, false otherwise.";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_HELPURL"] = "/reference/blocks/text.html#join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TITLE_ITEM"] = "string";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_JOIN"] = "join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TOOLTIP"] = "Appends all the inputs to form a single text string. If there are no inputs, makes an empty text.";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_HELPURL"] = "/reference/blocks/text.html#length";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_HELPURL"] = "/reference/blocks/text.html#replaceall";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT"] = "replace all text %1 segment %2 replacement %3";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TITLE_REPLACE_ALL"] = "replace all";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TOOLTIP"] = "Returns a new text obtained by replacing all occurrences of the segment with the replacement.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_AT_TOOLTIP"] = "Extracts the segment of the given length from the given text starting from the given text starting from the given position. Position 1 denotes the beginning of the text.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_HELPURL"] = "/reference/blocks/text.html#segment";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT"] = "segment  text %1 start %2 length %3";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_START"] = "start";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_TITLE_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_HELPURL"] = "/reference/blocks/text.html#splitspaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_TITLE"] = "split at spaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_TOOLTIP"] = "Split the text into pieces separated by spaces.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT"] = "/reference/blocks/text.html#split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_ANY"] = "/reference/blocks/text.html#splitatany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST"] = "/reference/blocks/text.html#splitat";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST_OF_ANY"] = "/reference/blocks/text.html#splitatfirstofany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT"] = "at";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT_LIST"] = "at (list)";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT"] = "split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY"] = "split at any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST"] = "split at first";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY"] = "split at first of any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT"] = "Divides text into pieces using the text 'at' as the dividing points and produces a list of the results.   Splitting 'one,two,three,four' at ',' (comma) returns the list '(one two three four)'.  Splitting 'one-potato,two-potato,three-potato,four' at '-potato', returns the list '(one two three four)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_ANY"] = "Divides the given text into a list, using any of the items in the list 'at' as the  dividing point, and returns a list of the results.  Splitting 'appleberry,banana,cherry,dogfood' with 'at' as the two-element list whose  first item is a comma and whose second item is 'rry' returns a list of four items:  '(applebe banana che dogfood)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST"] = "Divides the given text into two pieces using the location of the first occurrence of  the text 'at' as the dividing point, and returns a two-item list consisting of the piece  before the dividing point and the piece after the dividing point.  Splitting 'apple,banana,cherry,dogfood' with a comma as the splitting point  returns a list of two items: the first is the text 'apple' and the second is the text  'banana,cherry,dogfood'.  Notice that the comma after 'apple' does not appear in the result,  because that is the dividing point.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST_OF_ANY"] = "Divides the given text into a two-item list, using the first location of any item  in the list 'at' as the dividing point. Splitting 'I love apples bananas apples grapes' by the list '(ba,ap)' returns  a list of two items, the first being 'I love' and the second being  'ples bananas apples grapes.'";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_HELPURL"] = "/reference/blocks/text.html#startsat";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT"] = "starts at  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_STARTS_AT"] = "starts at";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_TOOLTIP"] = "Returns the starting index of the piece in the text. where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_HELPURL"] = "/reference/blocks/text.html#string";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_HELPURL"] = "/reference/blocks/text.html#isstring";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TITLE"] = "is a string?";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TOOLTIP"] = "Returns true if <code>thing</code> is a string.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_LEFT_QUOTE"] = "“";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE"] = "Obfuscated Text";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE_HELPURL"] = "/reference/blocks/text.html#obfuscatetext";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_RIGHT_QUOTE"] = "”";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_TOOLTIP"] = "A text string.";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_HELPURL"] = "/reference/blocks/text.html#trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TITLE_TRIM"] = "trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TOOLTIP"] = "Returns a copy of its text string arguments with any leading or trailing spaces removed.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_COLLAPSED_TEXT"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_HELPURL"] = "/reference/blocks/variables.html#get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TITLE_GET"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_COLLAPSED_TEXT"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT"] = "initialize global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TOOLTIP"] = "Creates a global variable and gives it the value of the attached blocks.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_PREFIX"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_DEFAULT_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_HELPURL"] = "/reference/blocks/variables.html#return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_IN_RETURN"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TOOLTIP"] = "Allows you to create variables that are only accessible in the return part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TRANSLATED_NAME"] = "initialize local in return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_IN_DO"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT"] = "initialize local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TOOLTIP"] = "Allows you to create variables that are only accessible in the do part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TRANSLATED_NAME"] = "initialize local in do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_DEFAULT_VARIABLE"] = "x";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_TITLE_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TITLE_LOCAL_NAMES"] = "local names";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_COLLAPSED_TEXT"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_HELPURL"] = "/reference/blocks/variables.html#set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_SET"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg["LANG_VARIABLES_VARIABLE"] = " variable";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "créer une liste vide";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Renvoyer une liste, de longueur 0, ne contenant aucun enregistrement";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "liste";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Ajouter, supprimer, ou réordonner les sections pour reconfigurer ce bloc de liste.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "créer une liste avec";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Ajouter un élément à la liste.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Créer une liste avec un nombre quelconque d’éléments.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "premier";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# depuis la fin";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "obtenir";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obtenir et supprimer";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "dernier";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "aléatoire";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "supprimer";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Renvoie le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Renvoie l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Renvoie le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Renvoie un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Supprime et renvoie le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Supprime et renvoie l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Supprime et renvoie le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Supprime et renvoie un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Supprime le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Supprime l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Supprime le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Supprime un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "jusqu’à # depuis la fin";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "jusqu’à #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "jusqu’à la fin";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obtenir la sous-liste depuis le début";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obtenir la sous-liste depuis # depuis la fin";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obtenir la sous-liste depuis #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Crée une copie de la partie spécifiée d’une liste.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 est le dernier élément.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 est le premier élément.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "trouver la première occurrence de l’élément";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "trouver la dernière occurrence de l’élément";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Renvoie l’index de la première/dernière occurrence de l’élément dans la liste. Renvoie %1 si l'élément n'est pas trouvé.";
Blockly.Msg["LISTS_INLIST"] = "dans la liste";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 est vide";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Renvoie vrai si la liste est vide.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "longueur de %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Renvoie la longueur d’une liste.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "créer une liste avec l’élément %1 répété %2 fois";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Crée une liste consistant en la valeur fournie répétée le nombre de fois indiqué.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "inverser %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Inverser la copie d’une liste.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "comme";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insérer en";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "mettre";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Insère l’élément au début d’une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Insère l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Ajouter l’élément à la fin d’une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Insère l’élément au hasard dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Fixe le premier élément dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Met à jour l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Fixe le dernier élément dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Fixe un élément au hasard dans une liste.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "croissant";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "décroissant";
Blockly.Msg["LISTS_SORT_TITLE"] = "trier %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Trier une copie d’une liste.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabétique, en ignorant la casse";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numérique";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabétique";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "créer une liste depuis le texte";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "créer un texte depuis la liste";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Réunir une liste de textes en un seul, en les séparant par un séparateur.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Couper un texte en une liste de textes, en coupant à chaque séparateur.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "avec séparateur";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "faux";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Renvoie soit vrai soit faux.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "vrai";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://fr.wikipedia.org/wiki/In%C3%A9galit%C3%A9_(math%C3%A9matiques)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Renvoyer vrai si les deux entrées sont égales.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Renvoyer vrai si la première entrée est plus grande que la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Renvoyer true si la première entrée est supérieure ou égale à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Renvoyer vrai si la première entrée est plus petite que la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Renvoyer vrai si la première entrée est plus petite ou égale à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Renvoyer vrai si les deux entrées sont différentes.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "pas %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Renvoie vrai si l’entrée est fausse. Renvoie faux si l’entrée est vraie.";
Blockly.Msg["LOGIC_NULL"] = "nul";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Renvoie nul.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "et";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "ou";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Renvoyer vrai si les deux entrées sont vraies.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Renvoyer vrai si au moins une des entrées est vraie.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "si faux";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "si vrai";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Vérifier la condition dans 'test'. Si elle est vraie, renvoie la valeur 'si vrai' ; sinon renvoie la valeur 'si faux'.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://fr.wikipedia.org/wiki/Arithm%C3%A9tique";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Renvoie la somme des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Renvoie le quotient des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Renvoie la différence des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Renvoie le produit des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Renvoie le premier nombre élevé à la puissance du second.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://fr.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 de X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Renvoie l'arc tangente du point (X, Y) en degrés entre -180 et 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://fr.wikipedia.org/wiki/Idiome_de_programmation";
Blockly.Msg["MATH_CHANGE_TITLE"] = "incrémenter %1 de %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Ajouter un nombre à la variable '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://fr.wikipedia.org/wiki/Table_de_constantes_math%C3%A9matiques";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Renvoie une des constantes courantes : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infini).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "contraindre %1 entre %2 et %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Contraindre un nombre à être entre les limites spécifiées (incluses).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "est divisible par";
Blockly.Msg["MATH_IS_EVEN"] = "est pair";
Blockly.Msg["MATH_IS_NEGATIVE"] = "est négatif";
Blockly.Msg["MATH_IS_ODD"] = "est impair";
Blockly.Msg["MATH_IS_POSITIVE"] = "est positif";
Blockly.Msg["MATH_IS_PRIME"] = "est premier";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Vérifier si un nombre est pair, impair, premier, entier, positif, négatif, ou s’il est divisible par un certain nombre. Renvoie vrai ou faux.";
Blockly.Msg["MATH_IS_WHOLE"] = "est entier";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://fr.wikipedia.org/wiki/Modulo_(op%C3%A9ration)";
Blockly.Msg["MATH_MODULO_TITLE"] = "reste de %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Renvoyer le reste de la division euclidienne des deux nombres.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://fr.wikipedia.org/wiki/Nombre";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un nombre.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "moyenne de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "maximum de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "médiane de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "minimum de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "majoritaires de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "élément aléatoire de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "écart-type de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "somme de la liste";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Renvoyer la moyenne (arithmétique) des valeurs numériques dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Renvoyer le plus grand nombre dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Renvoyer le nombre médian de la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Renvoyer le plus petit nombre dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Renvoyer une liste des élément(s) le(s) plus courant(s) dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Renvoyer un élément dans la liste au hasard.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Renvoyer l’écart-type de la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Renvoyer la somme de tous les nombres dans la liste.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fraction aléatoire";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Renvoyer une fraction aléatoire entre 0.0 (inclus) et 1.0 (exclus).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "entier aléatoire entre %1 et %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Renvoyer un entier aléatoire entre les deux limites spécifiées, incluses.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://fr.wikipedia.org/wiki/Arrondi_(math%C3%A9matiques)";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "arrondir";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arrondir par défaut";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "arrondir par excès";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Arrondir un nombre au-dessus ou au-dessous.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://fr.wikipedia.org/wiki/Racine_carr%C3%A9e";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "valeur absolue";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "racine carrée";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Renvoie la valeur absolue d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Renvoie e à la puissance d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Renvoie le logarithme naturel d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Renvoie le logarithme décimal d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Renvoie l’opposé d’un nombre";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Renvoie 10 à la puissance d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Renvoie la racine carrée d’un nombre.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://fr.wikipedia.org/wiki/Fonction_trigonom%C3%A9trique";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Renvoie l’arccosinus d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Renvoie l’arcsinus d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Renvoie l’arctangente d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Renvoie le cosinus d’un angle en degrés (pas en radians).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Renvoie le sinus d’un angle en degrés (pas en radians).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Renvoie la tangente d’un angle en degrés (pas en radians).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Créer une variable couleur…";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Créer une variable nombre…";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Créer une variable chaîne…";
Blockly.Msg["NEW_VARIABLE"] = "Créer une variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Nom de la nouvelle variable :";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Nouveau type de variable :";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "autoriser les ordres";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "avec :";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Exécuter la fonction '%1' définie par l’utilisateur.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Exécuter la fonction '%1' définie par l’utilisateur et utiliser son résultat.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "avec :";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Créer '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Décrire cette fonction…";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "faire quelque chose";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "pour";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crée une fonction sans sortie.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "retour";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crée une fonction avec une sortie.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Attention : Cette fonction a des paramètres en double.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Surligner la définition de la fonction";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Si une valeur est vraie, alors renvoyer une seconde valeur.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Attention : Ce bloc pourrait n’être utilisé que dans une définition de fonction.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "nom de l’entrée :";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Ajouter une entrée à la fonction.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entrées";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Ajouter, supprimer, ou réarranger les entrées de cette fonction.";
Blockly.Msg["PROCEDURE_CATEGORY"] = "Procedures";  // untranslated
Blockly.Msg["REDO"] = "Refaire";
Blockly.Msg["REMOVE_COMMENT"] = "Supprimer un commentaire";
Blockly.Msg["REMOVE_FROM_BACKPACK"] = "Remove from Backpack";  // untranslated
Blockly.Msg["RENAME_VARIABLE"] = "Renommer la variable…";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Renommer toutes les variables « %1 » en :";
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE"] = "Your Companion App is out of date. Click 'OK' to start the update. Watch your ";  // untranslated
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE2"] = "Your Companion App is out of date. Restart the Companion and use it to scan the QRCode below in order to update";  // untranslated
Blockly.Msg["REPL_EMULATOR_ONLY"] = "You can only use this option to update the Emulator";  // untranslated
Blockly.Msg["REPL_FACTORY_RESET"] = "This will attempt to reset your Emulator to its 'factory' state. If you had previously updated the Companion installed in the Emulator, you will likely have to do this again.";  // untranslated
Blockly.Msg["REPL_HELPER_NOT_RUNNING"] = "The aiStarter helper does not appear to be running<br /><a href='http://appinventor.mit.edu' target='_blank'>Need Help?</a>";  // untranslated
Blockly.Msg["REPL_UPDATE_INFO"] = "The update is now being installed on your device. Watch your device (or emulator) screen and approve the software installation when prompted.<br /><br />IMPORTANT: When the update finishes, choose 'DONE' (don't click 'open'). Then go to App Inventor in your web browser, click the 'Connect' menu and choose 'Reset Connection'.  Then reconnect the device.";  // untranslated
Blockly.Msg["SHOW"] = "Show Workspace Controls";  // untranslated
Blockly.Msg["SHOW_ALL_COMMENTS"] = "Show All Comments";  // untranslated
Blockly.Msg["SORT_C"] = "Sort Blocks by Category";  // untranslated
Blockly.Msg["SORT_H"] = "Sort Blocks by Height";  // untranslated
Blockly.Msg["SORT_W"] = "Sort Blocks by Width";  // untranslated
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "ajouter le texte %2 à %1";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Ajouter du texte à la variable '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "en minuscules";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "en Majuscule Au Début De Chaque Mot";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "en MAJUSCULES";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Renvoyer une copie du texte dans une autre casse.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "obtenir la première lettre";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obtenir la lettre # depuis la fin";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obtenir la lettre #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "obtenir la dernière lettre";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obtenir une lettre au hasard";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "dans le texte %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Renvoie la lettre à la position indiquée.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "nombre %1 sur %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Compter combien de fois un texte donné apparait dans un autre.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Ajouter un élément au texte.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "joindre";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Ajouter, supprimer, ou réordonner des sections pour reconfigurer ce bloc de texte.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "jusqu’à la lettre # depuis la fin";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "jusqu’à la lettre #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "jusqu’à la dernière lettre";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "dans le texte";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obtenir la sous-chaîne depuis la première lettre";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obtenir la sous-chaîne depuis la lettre # depuis la fin";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obtenir la sous-chaîne depuis la lettre #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Renvoie une partie indiquée du texte.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "trouver la première occurrence de la chaîne";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "trouver la dernière occurrence de la chaîne";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "dans le texte %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Renvoie l’index de la première/dernière occurrence de la première chaîne dans la seconde. Renvoie %1 si la chaîne n’est pas trouvée.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 est vide";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Renvoie vrai si le texte fourni est vide.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "créer un texte avec";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Créer un morceau de texte en agrégeant un nombre quelconque d’éléments.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "longueur de %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Renvoie le nombre de lettres (espaces compris) dans le texte fourni.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "afficher %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Afficher le texte, le nombre ou une autre valeur spécifiée.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Demander un nombre à l’utilisateur.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Demander un texte à l’utilisateur.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "invite pour un nombre avec un message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "invite pour un texte avec un message";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "remplacer %1 par %2 dans %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Remplacer toutes les occurrences d’un texte par un autre.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "inverser %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Inverse l’ordre des caractères dans le texte.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://fr.wikipedia.org/wiki/Cha%C3%AEne_de_caract%C3%A8res";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Une lettre, un mot ou une ligne de texte.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "supprimer les espaces des deux côtés";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "supprimer les espaces du côté gauche";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "supprimer les espaces du côté droit";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Renvoyer une copie du texte avec les espaces supprimés d’un bout ou des deux.";
Blockly.Msg["TODAY"] = "Aujourd'hui";
Blockly.Msg["UNDO"] = "Annuler";
Blockly.Msg["UNGENERICIZE_BLOCK"] = "Make Specific";  // untranslated
Blockly.Msg["UNNAMED_KEY"] = "non nommé";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "élément";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Créer 'fixer %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Renvoie la valeur de cette variable.";
Blockly.Msg["VARIABLES_SET"] = "fixer %1 à %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Créer 'obtenir %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Fixe cette variable pour qu’elle soit égale à la valeur de l’entrée.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Une variable appelée '%1' existe déjà.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Une variable nommée '%1' existe déjà pour un autre type : '%2'.";
Blockly.Msg["VARIABLE_CATEGORY"] = "Variables";  // untranslated
Blockly.Msg["VERTICAL_PARAMETERS"] = "Arrange Parameters Vertically";  // untranslated
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Dire quelque chose…";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_CALL"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";