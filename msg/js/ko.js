// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "주석 추가";
Blockly.Msg["ARRANGE_H"] = "Arrange Blocks Horizontally";  // untranslated
Blockly.Msg["ARRANGE_S"] = "Arrange Blocks Diagonally";  // untranslated
Blockly.Msg["ARRANGE_V"] = "Arrange Blocks Vertically";  // untranslated
Blockly.Msg["BACKPACK_CONFIRM_EMPTY"] = "Are you sure you want to empty the backpack?";  // untranslated
Blockly.Msg["BACKPACK_EMPTY"] = "Empty the Backpack";  // untranslated
Blockly.Msg["BACKPACK_GET"] = "Paste All Blocks from Backpack";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "'%2' 함수 정의의 일부이기 때문에 '%1' 변수를 삭제할 수 없습니다";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "값 바꾸기:";
Blockly.Msg["CLEAN_UP"] = "블록 정리";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
Blockly.Msg["COLLAPSE_ALL"] = "블록 축소";
Blockly.Msg["COLLAPSE_BLOCK"] = "블록 축소";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "색 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "색 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "비율";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "혼합";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "두 색을 주어진 비율로 혼합 (0.0 - 1.0)";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://ko.wikipedia.org/wiki/색";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "팔레트에서 색을 고릅니다";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "임의 색상";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "무작위로 색을 고릅니다.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "파랑";
Blockly.Msg["COLOUR_RGB_GREEN"] = "초록";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_RED"] = "빨강";
Blockly.Msg["COLOUR_RGB_TITLE"] = "색";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "빨강,파랑,초록의 값을 이용하여 색을 만드십시오. 모든 값은 0과 100 사이에 있어야 합니다.";
Blockly.Msg["CONFIRM_DELETE"] = "Confirm deletion";  // untranslated
Blockly.Msg["CONNECT_TO_DO_IT"] = "You must be connected to the companion or emulator to use 'Do It'";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://ko.wikipedia.org/wiki/%EC%A0%9C%EC%96%B4_%ED%9D%90%EB%A6%84";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "반복 중단";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "다음 반복";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "현재 반복 실행 블럭을 빠져나갑니다.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "나머지 반복 부분을 더 이상 실행하지 않고, 다음 반복을 수행합니다.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "경고 : 이 블록은 반복 실행 블럭 안에서만 사용됩니다.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://ko.wikipedia.org/wiki/For_%EB%A3%A8%ED%94%84#.EC.9E.84.EC.9D.98.EC.9D.98_.EC.A7.91.ED.95.A9";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "각 항목에 대해 %1 목록으로 %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "리스트 안에 들어있는 각 아이템들을, 순서대로 변수 '%1' 에 한 번씩 저장시키고, 그 때 마다 명령을 실행합니다.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://ko.wikipedia.org/wiki/For_%EB%A3%A8%ED%94%84";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "으로 계산 %1 %2에서 %4을 이용하여 %3로";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "변수 \"%1\"은 지정된 간격으로 시작 수에서 끝 수까지를 세어 지정된 블록을 수행해야 합니다.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "\"만약\" 블럭에 조건 검사를 추가합니다.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "\"만약\" 블럭의 마지막에, 모든 검사 결과가 거짓인 경우 실행할 부분을 추가합니다.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%AC%B8";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "섹션을 추가, 제거하거나 순서를 변경하여 이 if 블럭을 재구성합니다.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "아니라면";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "다른 경우";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "만약";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "조건식의 계산 결과가 참이면, 명령을 실행합니다.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 그렇지 않으면 두 번째 블럭의 명령을 실행합니다.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "첫 번째 조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 두 번째 조건식의 계산 결과가 참이면, 두 번째 블럭의 명령을 실행합니다.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "첫 번째 조건식의 계산 결과가 참이면, 첫 번째 블럭의 명령을 실행하고, 두 번째 조건식의 계산 결과가 참이면, 두 번째 블럭의 명령을 실행하고, ... , 어떤 조건식의 계산 결과도 참이 아니면, 마지막 블럭의 명령을 실행합니다.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://ko.wikipedia.org/wiki/For_루프";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "하기";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "%1회 반복";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "여러 번 반복해 명령들을 실행합니다.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://ko.wikipedia.org/wiki/While_%EB%A3%A8%ED%94%84";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "다음까지 반복";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "동안 반복";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "값이 거짓일 때, 몇 가지 선언을 합니다.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "값이 참일 때, 몇 가지 선언을 합니다.";
Blockly.Msg["COPY_ALLBLOCKS"] = "Copy All Blocks to Backpack";  // untranslated
Blockly.Msg["COPY_TO_BACKPACK"] = "Add to Backpack";  // untranslated
Blockly.Msg["DELETE_ALL_BLOCKS"] = "모든 블록 %1개를 삭제하겠습니까?";
Blockly.Msg["DELETE_BLOCK"] = "블록 삭제";
Blockly.Msg["DELETE_VARIABLE"] = "'%1' 변수를 삭제합니다";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "'%2' 변수에서 %1을(를) 삭제하시겠습니까?";
Blockly.Msg["DELETE_X_BLOCKS"] = "블록 %1개 삭제";
Blockly.Msg["DIALOG_ENTER_VALUES"] = "Enter values for:";  // untranslated
Blockly.Msg["DIALOG_SUBMIT"] = "Submit";  // untranslated
Blockly.Msg["DIALOG_UNBOUND_VAR"] = "Unbound Variables";  // untranslated
Blockly.Msg["DISABLE_ALL_BLOCKS"] = "Disable All Blocks";  // untranslated
Blockly.Msg["DISABLE_BLOCK"] = "블록 비활성화";
Blockly.Msg["DISABLE_GRID"] = "Disable Workspace Grid";  // untranslated
Blockly.Msg["DISABLE_SNAPPING"] = "Disable Snap to Grid";  // untranslated
Blockly.Msg["DOWNLOAD_BLOCKS_AS_PNG"] = "Download Blocks as PNG";  // untranslated
Blockly.Msg["DO_IT_DISCONNECTED"] = "Do It (Companion not connected)";  // untranslated
Blockly.Msg["DUPLICATE_BLOCK"] = "복제";
Blockly.Msg["DUPLICATE_COMMENT"] = "주석 복제하기";
Blockly.Msg["ENABLE_ALL_BLOCKS"] = "Enable All Blocks";  // untranslated
Blockly.Msg["ENABLE_BLOCK"] = "블록 활성화";
Blockly.Msg["ENABLE_GRID"] = "Enable Workspace Grid";  // untranslated
Blockly.Msg["ENABLE_SNAPPING"] = "Enable Snap to Grid";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "블록 확장";
Blockly.Msg["EXPAND_BLOCK"] = "블록 확장";
Blockly.Msg["EXPORT_IMAGE"] = "Download Blocks as Image";  // untranslated
Blockly.Msg["EXTERNAL_INPUTS"] = "외부 입력";
Blockly.Msg["GENERICIZE_BLOCK"] = "Make Generic";  // untranslated
Blockly.Msg["HELP"] = "도움말";
Blockly.Msg["HIDE"] = "Hide Workspace Controls";  // untranslated
Blockly.Msg["HIDE_ALL_COMMENTS"] = "Hide All Comments";  // untranslated
Blockly.Msg["HORIZONTAL_PARAMETERS"] = "Arrange Parameters Horizontally";  // untranslated
Blockly.Msg["INLINE_INPUTS"] = "내부 입력";
Blockly.Msg["IOS_CANCEL"] = "취소";
Blockly.Msg["IOS_ERROR"] = "오류";
Blockly.Msg["IOS_OK"] = "확인";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ 입력 추가";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";  // untranslated
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "이 기능은 중복된 입력이 있습니다.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "입력";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "추가";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ 변수 추가";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "삭제";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "비어있는 변수 이름을 사용할 수 없습니다.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "이름 바꾸기";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "변수 이름";
Blockly.Msg["LANG_CATEGORY_CONTROLS"] = "Control";  // untranslated
Blockly.Msg["LANG_CATEGORY_LISTS"] = "Lists";  // untranslated
Blockly.Msg["LANG_CATEGORY_LOGIC"] = "Logic";  // untranslated
Blockly.Msg["LANG_CATEGORY_MATH"] = "Math";  // untranslated
Blockly.Msg["LANG_CATEGORY_TEXT"] = "Text";  // untranslated
Blockly.Msg["LANG_COLOUR_BLACK"] = "black";  // untranslated
Blockly.Msg["LANG_COLOUR_BLUE"] = "blue";  // untranslated
Blockly.Msg["LANG_COLOUR_CYAN"] = "cyan";  // untranslated
Blockly.Msg["LANG_COLOUR_DARK_GRAY"] = "dark gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GRAY"] = "gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GREEN"] = "green";  // untranslated
Blockly.Msg["LANG_COLOUR_LIGHT_GRAY"] = "light gray";  // untranslated
Blockly.Msg["LANG_COLOUR_MAGENTA"] = "magenta";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR"] = "make color";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR_HELPURL"] = "/reference/blocks/colors.html#make";  // untranslated
Blockly.Msg["LANG_COLOUR_ORANGE"] = "orange";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_HELPURL"] = "/reference/blocks/colors.html#basic";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_TOOLTIP"] = "Click the square to pick a color.";  // untranslated
Blockly.Msg["LANG_COLOUR_PINK"] = "pink";  // untranslated
Blockly.Msg["LANG_COLOUR_RED"] = "red";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR"] = "split color";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR_HELPURL"] = "/reference/blocks/colors.html#split";  // untranslated
Blockly.Msg["LANG_COLOUR_WHITE"] = "white";  // untranslated
Blockly.Msg["LANG_COLOUR_YELLOW"] = "yellow";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_METHODS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_EVENTS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_METHODS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_EVENTS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_METHODS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_EVENTS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_METHODS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_EVENTS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_METHODS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_EVENTS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_METHODS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_EVENTS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_METHODS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_METHODS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_DATEPICKER_HELPURL"] = "/reference/components/userinterface.html#DatePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_METHODS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_EVENTS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_METHODS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_PROPERTIES_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_EVENTS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_METHODS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_PROPERTIES_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE"] = "when any ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT"] = "for component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HORIZARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#HorizontalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_EVENTS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_METHODS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_PROPERTIES_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_EVENTS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_METHODS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_PROPERTIES_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_METHODS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_METHODS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_METHODS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTVIEW_HELPURL"] = "/reference/components/userinterface.html#ListView";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_METHODS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_METHODS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_METHODS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_METHODS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_EVENTS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_METHODS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_EVENTS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_METHODS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_PROPERTIES_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_EVENTS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_METHODS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPINNER_HELPURL"] = "/reference/components/userinterface.html#Spinner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SWITCH_HELPURL"] = "/reference/components/userinterface.html#Switch";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TABLEARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#TableArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_EVENTS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_METHODS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_PROPERTIES_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_EVENTS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_METHODS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_PROPERTIES_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TIMEPICKER_HELPURL"] = "/reference/components/userinterface.html#TimePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_DO"] = "do";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_WHEN"] = "when ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_EVENTS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_METHODS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_PROPERTIES_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VERTARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#VerticalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_METHODS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_EVENTS_HELPURL"] = "/reference/components/internal.html#votingevents";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_METHODS_HELPURL"] = "/reference/components/internal.html#votingmethods";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_PROPERTIES_HELPURL"] = "/reference/components/internal.html#votingproperties";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_METHODS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_EVENTS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_METHODS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_COLLAPSED_TEXT"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_HELPURL"] = "/reference/blocks/control.html#break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_INPUT_TEXT"] = "value";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_TITLE"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_HELPURL"] = "/reference/blocks/control.html#choose";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_ELSE_RETURN"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_TEST"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_THEN_RETURN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TITLE"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TOOLTIP"] = "If the condition being tested is true,";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_COLLAPSED_TEXT"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TITLE"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TOOLTIP"] = "Closes all screens in this app and stops the app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TITLE"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TOOLTIP"] = "Close the current screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_COLLAPSED_TEXT"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_HELPURL"] = "/reference/blocks/control.html#closescreenwithplaintext";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TOOLTIP"] = "Closes the current screen and returns text to the app that ";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_COLLAPSED_TEXT"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_INPUT_RESULT"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TOOLTIP"] = "Closes the current screen and returns a result to the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_HELPURL"] = "/reference/blocks/control.html#doreturn";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TITLE"] = "do result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_COLLAPSED_TEXT"] = "eval but ignore";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_HELPURL"] = "/reference/blocks/control.html#evaluate";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE"] = "evaluate but ignore result";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TOOLTIP"] = "Runs the connected block of code and ignores the return value (if any). Useful if need to call a procedure with a return value but don't need the value.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_HELPURL"] = "http://en.wikipedia.org/wiki/Control_flow";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP"] = "of loop";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_HELPURL"] = "/reference/blocks/control.html#foreach";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_SUFFIX"] = " in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_TEXT"] = "for item in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_INLIST"] = "in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_VAR"] = "item";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_TOOLTIP"] = "Runs the blocks in the 'do'  section for each item in ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_HELPURL"] = "/reference/blocks/control.html#forrange";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_SUFFIX"] = " in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_TEXT"] = "for number in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_END"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_START"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_STEP"] = "by";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_VAR"] = "number";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_TOOLTIP"] = "Runs the blocks in the 'do' section for each numeric ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_VAR"] = "x";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_WITH"] = "count with";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_HELPURL"] = "/reference/blocks/control.html#get";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_COLLAPSED_TEXT"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_HELPURL"] = "/reference/blocks/control.html#getplainstarttext";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TOOLTIP"] = "Returns the plain text that was passed to this screen when ";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_COLLAPSED_TEXT"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_HELPURL"] = "/reference/blocks/control.html#getstartvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TITLE"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TOOLTIP"] = "Returns the value that was passed to this screen when it ";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TITLE_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_HELPURL"] = "/reference/blocks/control.html#if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TITLE_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_THEN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_COLLAPSED_TEXT"] = "open screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_HELPURL"] = "/reference/blocks/control.html#openscreen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE"] = "open another screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TOOLTIP"] = "Opens a new screen in a multiple screen app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_COLLAPSED_TEXT"] = "open screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_HELPURL"] = "/reference/blocks/control.html#openscreenwithvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE"] = "open another screen with start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TOOLTIP"] = "Opens a new screen in a multiple screen app and passes the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_HELPURL"] = "/reference/blocks/control.html#while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "until";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT"] = "repeat";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_1"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_COLLAPSED_TEXT"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_TEST"] = "test";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TITLE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TOOLTIP"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT"] = "add items to list list %1 item %2";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_LIST"] = " list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TITLE_ADD"] = "add items to list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TOOLTIP"] = "Adds items to the end of a list.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_HELPURL"] = "/reference/blocks/lists.html#append";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT"] = "append to list  list1 %1 list2 %2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST1"] = "list1";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST2"] = "list2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TITLE_APPEND"] = "append to list";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TOOLTIP"] = "Appends all the items in list2 onto the end of list1. After ";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_HELPURL"] = "/reference/blocks/lists.html#copy";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TITLE_COPY"] = "copy list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TOOLTIP"] = "Makes a copy of a list, including copying all sublists";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_EMPTY_TITLE"] = "create empty list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_EMPTY_HELPURL"] = "/reference/blocks/lists.html#makealist";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST"] = "make a list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listfromcsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV"] = "list from csv row";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listfromcsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV"] = "list from csv table";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT"] = "insert list item  list %1 index %2 item %3";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_ITEM_HELPURL"] = "/reference/blocks/lists.html#insert";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TITLE_INSERT_LIST"] = "insert list item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TOOLTIP"] = "Insert an item into a list at the specified position.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_HELPURL"] = "/reference/blocks/lists.html#islistempty";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_TOOLTIP"] = "Returns true if the list is empty.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_HELPURL"] = "/reference/blocks/lists.html#inlist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT"] = "is in list? thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TITLE_IS_IN"] = "is in list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TOOLTIP"] = "Returns true if the the thing is an item in the list, and ";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_HELPURL"] = "/reference/blocks/lists.html#isalist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TITLE_IS_LIST"] = "is a list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TOOLTIP"] = "Tests if something is a list.";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_HELPURL"] = "/reference/blocks/lists.html#joinwithseparator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT"] = "join items using separator %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_SEPARATOR"] = "separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TITLE"] = "join with separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TOOLTIP"] = "Returns text with list elements joined with separator";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_HELPURL"] = "/reference/blocks/lists.html#lengthoflist";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT"] = "length of list list %1";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LENGTH"] = "length of list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_TOOLTIP"] = "Counts the number of items in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_HELPURL"] = "/reference/blocks/lists.html#lookuppairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT"] = "look up in pairs  key %1 pairs %2 notFound %3";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY"] = "key";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND"] = "notFound";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS"] = "pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS"] = "look up in pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TOOLTIP"] = "Returns the value associated with the key in the list of pairs";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_HELPURL"] = "/reference/blocks/lists.html#pickrandomitem";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM"] = "pick a random item";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TOOLTIP"] = "Pick an item at random from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_HELPURL"] = "/reference/blocks/lists.html#indexinlist";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT"] = "index in list  thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TITLE_POSITION"] = "index in list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TOOLTIP"] = "Find the position of the thing in the list. If it's not in ";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_HELPURL"] = "/reference/blocks/lists.html#removeitem";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT"] = "remove list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE"] = "remove list item";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TOOLTIP"] = "Removes the item at the specified position from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_HELPURL"] = "/reference/blocks/lists.html#replace";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT"] = "replace list item  list %1 index %2 replacement %3";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE"] = "replace list item";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TOOLTIP"] = "Replaces the nth item in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_HELPURL"] = "/reference/blocks/lists.html#reverse";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TITLE_REVERSE"] = "reverse list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TOOLTIP"] = "Reverses the order of input list and returns it as a new list.";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT"] = "select list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_HELPURL"] = "/reference/blocks/lists.html#selectlistitem";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_SELECT"] = "select list item";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TOOLTIP"] = "Returns the item at position index in the list.";  // untranslated
Blockly.Msg["LANG_LISTS_TITLE_IS_EMPTY"] = "is list empty?";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listtocsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV"] = "list to csv row";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TOOLTIP"] = "Interprets the list as a row of a table and returns a CSV ";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listtocsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV"] = "list to csv table";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TOOLTIP"] = "Interprets the list as a table in row-major format and ";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE"] = "false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE_HELPURL"] = "/reference/blocks/logic.html#false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_FALSE"] = "Returns the boolean false.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_TRUE"] = "Returns the boolean true.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE"] = "true";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE_HELPURL"] = "/reference/blocks/logic.html#true";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL"] = "http://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_EQ"] = "/reference/blocks/logic.html#=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_NEQ"] = "/reference/blocks/logic.html#not=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TRANSLATED_NAME"] = "logic equal";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_HELPURL"] = "/reference/blocks/logic.html#not";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_INPUT_NOT"] = "not";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_AND"] = "and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_AND"] = "/reference/blocks/logic.html#and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_OR"] = "/reference/blocks/logic.html#or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_OR"] = "or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if all inputs are true.";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if any input is true.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_ADD"] = "+";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_DIVIDE"] = "/";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_ADD"] = "/reference/blocks/math.html#add";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_DIVIDE"] = "/reference/blocks/math.html#divide";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MINUS"] = "/reference/blocks/math.html#subtract";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MULTIPLY"] = "/reference/blocks/math.html#multiply";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_POWER"] = "/reference/blocks/math.html#exponent";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MINUS"] = "-";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MULTIPLY"] = "*";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_POWER"] = "^";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_AND"] = "bitwise and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_AND"] = "/reference/blocks/math.html#bitwise_and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_IOR"] = "/reference/blocks/math.html#bitwise_ior";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_XOR"] = "/reference/blocks/math.html#bitwise_xor";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_IOR"] = "bitwise or";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_AND"] = "Return the bitwise AND of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_IOR"] = "Return the bitwise inclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_XOR"] = "Return the bitwise exclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_XOR"] = "bitwise xor";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GT"] = ">";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GTE"] = "≥";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_EQ"] = "/reference/blocks/math.html#=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GT"] = "/reference/blocks/math.html#gt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GTE"] = "/reference/blocks/math.html#gte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LT"] = "/reference/blocks/math.html#lt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LTE"] = "/reference/blocks/math.html#lte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_NEQ"] = "/reference/blocks/math.html#not=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LT"] = "<";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LTE"] = "≤";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_EQ"] = "Return true if both numbers are equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_NEQ"] = "Return true if both numbers are not equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_DEG_TO_RAD"] = "/reference/blocks/math.html#convertdeg";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_RAD_TO_DEG"] = "/reference/blocks/math.html#convertrad";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_DEG_TO_RAD"] = "degrees to radians";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_RAD_TO_DEG"] = "radians to degrees";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_TITLE_CONVERT"] = "convert";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_BIN_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_BIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_HEX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_HEX_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_BIN_TO_DEC"] = "binary to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_BIN"] = "base 10 to binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_HEX"] = "base 10 to hex";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_HEX_TO_DEC"] = "hex to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TITLE_CONVERT"] = "convert number";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_BIN_TO_DEC"] = "Takes a string that represents a number in binary and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_BIN"] = "Takes a positive integer in base 10 and returns the string that represents the number in binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_HEX"] = "Takes a positive integer in base 10 and returns the string that represents the number in hexadecimal";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_HEX_TO_DEC"] = "Takes a string that represents a number in hexadecimal and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE"] = "÷";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_MODULO"] = "/reference/blocks/math.html#modulo";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_QUOTIENT"] = "/reference/blocks/math.html#quotient";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_REMAINDER"] = "/reference/blocks/math.html#remainder";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_MODULO"] = "modulo of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_QUOTIENT"] = "quotient of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_REMAINDER"] = "remainder of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_MODULO"] = "Return the modulo.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_QUOTIENT"] = "Return the quotient.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_REMAINDER"] = "Return the remainder.";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_HELPURL"] = "/reference/blocks/math.html#format";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT"] = "format as decimal number %1 places %2";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_NUM"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_PLACES"] = "places";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_TITLE"] = "format as decimal";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_INPUT_NUM"] = "is binary?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_TOOLTIP"] = "Tests if something is a string that represents a binary number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_INPUT_NUM"] = "is Base 10?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_TOOLTIP"] = "Tests if something is a string that represents a positive base 10 integer.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_INPUT_NUM"] = "is hexadecimal?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_TOOLTIP"] = "Tests if something is a string that represents a hexadecimal number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_INPUT_NUM"] = "is number?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_TOOLTIP"] = "Tests if something is a number.";  // untranslated
Blockly.Msg["LANG_MATH_MUTATOR_ITEM_INPUT_NUMBER"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_HELPURL"] = "/reference/blocks/math.html#number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_TOOLTIP"] = "Report the number shown.";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MAX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MAX"] = "max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MIN"] = "min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_HELPURL"] = "/reference/blocks/math.html#randomfrac";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random number between 0 and 1.";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_HELPURL"] = "/reference/blocks/math.html#randomint";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT"] = "random integer from %1 to %2";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_TITLE_RANDOM"] = "random integer";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_HELPURL"] = "/reference/blocks/math.html#randomseed";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_TITLE_RANDOM"] = "random set seed";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_CEILING"] = "/reference/blocks/math.html#ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_FLOOR"] = "/reference/blocks/math.html#floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_ROUND"] = "/reference/blocks/math.html#round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_CEILING"] = "ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_FLOOR"] = "floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_ROUND"] = "round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_TOOLTIP_ROUND"] = "Round a number up or down.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ABS"] = "/reference/blocks/math.html#abs";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_EXP"] = "/reference/blocks/math.html#e";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_LN"] = "/reference/blocks/math.html#log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_NEG"] = "/reference/blocks/math.html#neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ROOT"] = "/reference/blocks/math.html#sqrt";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ABSOLUTE"] = "absolute";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_EXP"] = "e^";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_LN"] = "log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_NEG"] = "neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ROOT"] = "square root";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_EXP"] = "Return e (2.71828...) to the power of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number, i.e. the logarithm to the base e (2.71828...)";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2"] = "atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_X"] = "x";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_Y"] = "y";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ACOS"] = "/reference/blocks/math.html#acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ASIN"] = "/reference/blocks/math.html#asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN"] = "/reference/blocks/math.html#atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN2"] = "/reference/blocks/math.html#atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_COS"] = "/reference/blocks/math.html#cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_SIN"] = "/reference/blocks/math.html#sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_TAN"] = "/reference/blocks/math.html#tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_COS"] = "Provides the cosine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_SIN"] = "Provides the sine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_TAN"] = "Provides the tangent of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TOOLTIP"] = "Call a procedure with no return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TRANSLATED_NAME"] = "call no return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TOOLTIP"] = "Call a procedure with a return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TRANSLATED_NAME"] = "call return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_TOOLTIP"] = "A procedure that does not return a value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_TOOLTIP"] = "A procedure returning a result value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_HELPURL"] = "/reference/blocks/procedures.html#doreturn";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_THEN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_GET_HELPURL"] = "/reference/blocks/procedures.html#get";  // untranslated
Blockly.Msg["LANG_PROCEDURES_HIGHLIGHT_DEF"] = "Highlight Procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TITLE"] = "input:";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_APPENDTEXT"] = "append text";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_HELPURL"] = "http://www.liv.ac.uk/HPC/HTMLF90Course/HTMLF90CourseNotesnode91.html";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TO"] = "to";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_VARIABLE"] = "item";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_DOWNCASE"] = "/reference/blocks/text.html#downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_UPPERCASE"] = "/reference/blocks/text.html#upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE"] = "downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_DOWNCASE"] = "Returns a copy of its text string argument converted to lowercase.";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_UPPERCASE"] = "Returns a copy of its text string argument converted to uppercase.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_EQUAL"] = " =";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_GT"] = " >";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_HELPURL"] = "/reference/blocks/text.html#compare";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_INPUT_COMPARE"] = "compare texts";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_LT"] = " <";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_NEQ"] = " ≠";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_EQUAL"] = "Tests whether text strings are identical, ie., have the same characters in the same order. This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text =.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_GT"] = "Reports whether text1 is lexicographically greater than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_LT"] = "Tests whether text1 is lexicographically less than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_NEQ"] = "Tests whether text strings are different, ie., don't have the same characters in the same order. This is different from ordinary ≠ in the case where the text strings are numbers: 123 and 0123 are text ≠ but are mathematically =.";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_HELPURL"] = "/reference/blocks/text.html#contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT"] = "contains  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_CONTAINS"] = "contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_TOOLTIP"] = "Tests whether the piece is contained in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_HELPURL"] = "/reference/blocks/text.html#isempty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_INPUT_ISEMPTY"] = "is empty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the length of the ' + 'text is 0, false otherwise.";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_HELPURL"] = "/reference/blocks/text.html#join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TITLE_ITEM"] = "string";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_JOIN"] = "join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TOOLTIP"] = "Appends all the inputs to form a single text string. If there are no inputs, makes an empty text.";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_HELPURL"] = "/reference/blocks/text.html#length";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_HELPURL"] = "/reference/blocks/text.html#replaceall";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT"] = "replace all text %1 segment %2 replacement %3";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TITLE_REPLACE_ALL"] = "replace all";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TOOLTIP"] = "Returns a new text obtained by replacing all occurrences of the segment with the replacement.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_AT_TOOLTIP"] = "Extracts the segment of the given length from the given text starting from the given text starting from the given position. Position 1 denotes the beginning of the text.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_HELPURL"] = "/reference/blocks/text.html#segment";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT"] = "segment  text %1 start %2 length %3";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_START"] = "start";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_TITLE_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_HELPURL"] = "/reference/blocks/text.html#splitspaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_TITLE"] = "split at spaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_TOOLTIP"] = "Split the text into pieces separated by spaces.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT"] = "/reference/blocks/text.html#split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_ANY"] = "/reference/blocks/text.html#splitatany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST"] = "/reference/blocks/text.html#splitat";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST_OF_ANY"] = "/reference/blocks/text.html#splitatfirstofany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT"] = "at";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT_LIST"] = "at (list)";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT"] = "split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY"] = "split at any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST"] = "split at first";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY"] = "split at first of any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT"] = "Divides text into pieces using the text 'at' as the dividing points and produces a list of the results.   Splitting 'one,two,three,four' at ',' (comma) returns the list '(one two three four)'.  Splitting 'one-potato,two-potato,three-potato,four' at '-potato', returns the list '(one two three four)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_ANY"] = "Divides the given text into a list, using any of the items in the list 'at' as the  dividing point, and returns a list of the results.  Splitting 'appleberry,banana,cherry,dogfood' with 'at' as the two-element list whose  first item is a comma and whose second item is 'rry' returns a list of four items:  '(applebe banana che dogfood)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST"] = "Divides the given text into two pieces using the location of the first occurrence of  the text 'at' as the dividing point, and returns a two-item list consisting of the piece  before the dividing point and the piece after the dividing point.  Splitting 'apple,banana,cherry,dogfood' with a comma as the splitting point  returns a list of two items: the first is the text 'apple' and the second is the text  'banana,cherry,dogfood'.  Notice that the comma after 'apple' does not appear in the result,  because that is the dividing point.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST_OF_ANY"] = "Divides the given text into a two-item list, using the first location of any item  in the list 'at' as the dividing point. Splitting 'I love apples bananas apples grapes' by the list '(ba,ap)' returns  a list of two items, the first being 'I love' and the second being  'ples bananas apples grapes.'";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_HELPURL"] = "/reference/blocks/text.html#startsat";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT"] = "starts at  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_STARTS_AT"] = "starts at";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_TOOLTIP"] = "Returns the starting index of the piece in the text. where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_HELPURL"] = "/reference/blocks/text.html#string";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_HELPURL"] = "/reference/blocks/text.html#isstring";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TITLE"] = "is a string?";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TOOLTIP"] = "Returns true if <code>thing</code> is a string.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_LEFT_QUOTE"] = "“";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE"] = "Obfuscated Text";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE_HELPURL"] = "/reference/blocks/text.html#obfuscatetext";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_RIGHT_QUOTE"] = "”";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_TOOLTIP"] = "A text string.";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_HELPURL"] = "/reference/blocks/text.html#trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TITLE_TRIM"] = "trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TOOLTIP"] = "Returns a copy of its text string arguments with any leading or trailing spaces removed.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_COLLAPSED_TEXT"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_HELPURL"] = "/reference/blocks/variables.html#get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TITLE_GET"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_COLLAPSED_TEXT"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT"] = "initialize global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TOOLTIP"] = "Creates a global variable and gives it the value of the attached blocks.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_PREFIX"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_DEFAULT_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_HELPURL"] = "/reference/blocks/variables.html#return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_IN_RETURN"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TOOLTIP"] = "Allows you to create variables that are only accessible in the return part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TRANSLATED_NAME"] = "initialize local in return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_IN_DO"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT"] = "initialize local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TOOLTIP"] = "Allows you to create variables that are only accessible in the do part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TRANSLATED_NAME"] = "initialize local in do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_DEFAULT_VARIABLE"] = "x";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_TITLE_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TITLE_LOCAL_NAMES"] = "local names";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_COLLAPSED_TEXT"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_HELPURL"] = "/reference/blocks/variables.html#set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_SET"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg["LANG_VARIABLES_VARIABLE"] = " variable";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "빈 리스트 생성";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "데이터 레코드가 없는, 길이가 0인 목록을 반환합니다.";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "리스트";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "섹션을 추가, 제거하거나 순서를 변경하여 이 리스트 블럭을 재구성합니다.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "리스트 만들기";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "아이템을 리스트에 추가합니다.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "원하는 수의 항목들로 목록을 생성합니다.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "첫 번째";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "마지막 번째 위치부터, # 번째";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "가져오기";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "잘라 내기";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "마지막";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "임의로";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "삭제";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "첫 번째 아이템을 찾아 돌려줍니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "목록에서 특정 위치의 항목을 반환합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "마지막 아이템을 찾아 돌려줍니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "리스트의 아이템들 중, 랜덤으로 선택해 돌려줍니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "첫 번째 아이템을 찾아내 돌려주고, 그 아이템을 리스트에서 삭제합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "목록의 특정 위치에 있는 항목을 제거하고 반환합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "마지막 아이템을 찾아내 돌려주고, 그 아이템을 리스트에서 삭제합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "목록에서 임의 위치의 아이템을 찾아내 삭제하고 돌려줍니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "리스트에서 첫 번째 아이템을 삭제합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "목록에서 특정 위치의 항목을 삭제합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "리스트에서 마지막 아이템을 찾아 삭제합니다.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "리스트에서 랜덤하게 아이템을 삭제합니다.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "끝에서부터 # 번째로";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "앞에서부터 # 번째로";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "마지막으로";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "첫 번째 위치부터, 서브 리스트 추출";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "마지막부터 # 번째 위치부터, 서브 리스트 추출";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "처음 # 번째 위치부터, 서브 리스트 추출";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "목록의 특정 부분에 대한 복사본을 만듭니다.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1은(는) 마지막 항목입니다.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1은 첫 번째 항목입니다.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "처음으로 나타난 위치";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "마지막으로 나타난 위치";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "목록에서 항목이 처음 또는 마지막으로 발생한 색인 위치를 반환합니다. 항목이 없으면 %1을 반환합니다.";
Blockly.Msg["LISTS_INLIST"] = "리스트";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1이 비어 있습니다";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "목록이 비었을 때 참을 반환합니다.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "%1의 길이";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "목록의 길이를 반환합니다.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "%1을 %2번 넣어, 리스트 생성";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "지정된 값을, 지정된 개수 만큼 넣어, 목록을 생성합니다.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "%1 뒤집기";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "리스트의 복사본을 뒤집습니다.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "에";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "에서 원하는 위치에 삽입";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "에서 설정";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "항목을 목록의 처음 위치에 삽입합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "목록의 특정 위치에 항목을 삽입합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "리스트의 마지막에 아이템을 추가합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "목록에서 임의 위치에 아이템을 삽입합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "첫 번째 위치의 아이템으로 설정합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "목록의 특정 위치에 있는 항목으로 설정합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "마지막 아이템으로 설정합니다.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "목록에서 임의 위치의 아이템을 설정합니다.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "오름차순";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "내림차순";
Blockly.Msg["LISTS_SORT_TITLE"] = "정렬 %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "목록의 사본을 정렬합니다.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "알파벳순 (대소문자 구분 안 함)";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "숫자순";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "알파벳순";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "텍스트에서 목록 만들기";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "목록에서 텍스트 만들기";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "구분 기호로 구분하여 텍스트 목록을 하나의 텍스트에 병합합니다.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "각 속보, 텍스트의 목록들에서 텍스트를 분할합니다.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "분리와";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "거짓";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://ko.wikipedia.org/wiki/%EC%A7%84%EB%A6%BF%EA%B0%92";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "참 혹은 거짓 모두 반환합니다.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "참";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://ko.wikipedia.org/wiki/부등식";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "두 값이 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "첫 번째 값이 두 번째 값보다 크면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "첫 번째 값이 두 번째 값보다 크거나 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "첫 번째 값이 두 번째 값보다 작으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "첫 번째 값이 두 번째 값보다 작거나 같으면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "두 값이 서로 다르면, 참(true) 값을 돌려줍니다.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://ko.wikipedia.org/wiki/%EB%B6%80%EC%A0%95";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "%1가 아닙니다";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "입력값이 거짓이라면 참을 반환합니다. 참이라면 거짓을 반환합니다.";
Blockly.Msg["LOGIC_NULL"] = "빈 값";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "빈 값을 반환합니다.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "그리고";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://ko.wikipedia.org/wiki/%EB%B6%88_%EB%85%BC%EB%A6%AC";
Blockly.Msg["LOGIC_OPERATION_OR"] = "또는";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "두 값이 모두 참(true) 값이면, 참 값을 돌려줍니다.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "적어도 하나의 값이 참일 경우 참을 반환합니다.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "테스트";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://ko.wikipedia.org/wiki/물음표";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "만약 거짓이라면";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "만약 참이라면";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "'test'의 조건을 검사합니다. 조건이 참이면 'if true' 값을 반환합니다. 거짓이면 'if false' 값을 반환합니다.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://ko.wikipedia.org/wiki/산술";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "두 수의 합을 반환합니다.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "두 수의 나눈 결과를 반환합니다.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "두 수간의 차이를 반환합니다.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "두 수의 곱을 반환합니다.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "첫 번째 수를 두 번째 수 만큼, 거듭제곱 한 결과값을 돌려줍니다.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";  // untranslated
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "바꾸기 %1 만큼 %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "변수 '%1' 에 저장되어있는 값에, 어떤 수를 더해, 변수에 다시 저장합니다.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://ko.wikipedia.org/wiki/수학_상수";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "일반적인 상수 값들 중 하나를 돌려줍니다. : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://ko.wikipedia.org/wiki/클램핑_(그래픽)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "%1의 값을, 최소 %2 최대 %3으로 조정";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "어떤 수를, 특정 범위의 값이 되도록 강제로 조정합니다.";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "가 다음 수로 나누어 떨어지면 :";
Blockly.Msg["MATH_IS_EVEN"] = "가 짝수(even) 이면";
Blockly.Msg["MATH_IS_NEGATIVE"] = "가 음(-)수 이면";
Blockly.Msg["MATH_IS_ODD"] = "가 홀수(odd) 이면";
Blockly.Msg["MATH_IS_POSITIVE"] = "가 양(+)수 이면";
Blockly.Msg["MATH_IS_PRIME"] = "가 소수(prime) 이면";
Blockly.Msg["MATH_IS_TOOLTIP"] = "어떤 수가 짝 수, 홀 수, 소 수, 정 수, 양 수, 음 수, 나누어 떨어지는 수 인지 검사해 결과값을 돌려줍니다. 참(true) 또는 거짓(false) 값을 돌려줌.";
Blockly.Msg["MATH_IS_WHOLE"] = "가 정수이면";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "%1 ÷ %2의 나머지";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "첫 번째 수를 두 번째 수로 나눈, 나머지 값을 돌려줍니다.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "x";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://ko.wikipedia.org/wiki/수_(수학)";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "수";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "평균값";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "최대값";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "중간값";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "최소값";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "가장 여러 개 있는 값";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "목록의 임의 항목";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "표준 편차";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "합";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "리스트에 들어있는 수(값)들에 대해, 산술 평균(arithmetic mean) 한 값을 돌려줍니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "리스트에 들어있는 수(값) 들 중, 가장 큰(max) 수(값)를 돌려줍니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "리스트에 들어있는 수(값) 들 중, 중간(median) 수(값)를 돌려줍니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "리스트에 들어있는 수(값) 들 중, 가장 작은(min) 수(값)를 돌려줍니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "리스트에 들어있는 아이템들 중에서, 가장 여러 번 들어있는 아이템들을 리스트로 만들어 돌려줍니다. (최빈값, modes)";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "목록에서 임의의 아이템을 돌려줍니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "이 리스트의 표준 편차를 반환합니다.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "리스트에 들어있는 수(값)들을, 모두 합(sum) 한, 총합(sum)을 돌려줍니다.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "임의 분수";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "0.0 (포함)과 1.0 (배타적) 사이의 임의 분수 값을 돌려줍니다.";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "랜덤정수(%1<= n <=%2)";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "두 주어진 제한된 범위 사이의 임의 정수값을 돌려줍니다.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://ko.wikipedia.org/wiki/반올림";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "반올림";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "버림";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "올림";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "어떤 수를 반올림/올림/버림한 결과를, 정수값으로 돌려줍니다.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://ko.wikipedia.org/wiki/제곱근";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "절대값";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "제곱근";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "어떤 수의 절대값(absolute)을 계산한 결과를, 정수값으로 돌려줍니다.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "e의 거듭제곱 값을 반환합니다.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "어떤 수의, 자연로그(natural logarithm) 값을 돌려줍니다.(밑 e, 예시 log e x)";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "어떤 수의, 기본로그(logarithm) 값을 돌려줍니다.(밑 10, 예시 log 10 x)";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "음(-)/양(+), 부호를 반대로 하여 값을 돌려줍니다.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "10의 거듭제곱 값을 반환합니다.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "숫자의 제곱근을 반환합니다.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://ko.wikipedia.org/wiki/삼각함수";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "어떤 수에 대한, acos(arccosine) 값을 돌려줍니다.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "어떤 수에 대한, asin(arcsine) 값을 돌려줍니다.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "어떤 수에 대한, atan(arctangent) 값을 돌려줍니다.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "각도의 코사인을 반환합니다. (라디안 아님)";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "각도의 사인을 반환합니다. (라디안 아님)";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "각도의 탄젠트를 반환합니다. (라디안 아님)";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "색 변수 만들기...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "숫자 변수 만들기....";
Blockly.Msg["NEW_STRING_VARIABLE"] = "문자열 변수 만들기...";
Blockly.Msg["NEW_VARIABLE"] = "변수 만들기...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "새 변수 이름:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "새 변수 유형:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "서술 허가";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "사용:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://ko.wikipedia.org/wiki/함수_(프로그래밍)";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "미리 정의해 둔 '%1' 함수를 실행합니다.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://ko.wikipedia.org/wiki/함수_(프로그래밍)";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "미리 정의해 둔 '%1' 함수를 실행하고, 함수를 실행한 결과 값을 돌려줍니다.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "사용:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "'%1' 생성";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "이 함수를 설명하세요...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%28%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%29";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "함수 이름";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "함수";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "실행 후, 결과 값을 돌려주지 않는 함수를 만듭니다.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%28%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%29";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "다음을 돌려줌";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "실행 후, 결과 값을 돌려주는 함수를 만듭니다.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "경고: 이 함수에는, 같은 이름을 사용하는 매개 변수들이 있습니다.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "함수 정의 찾기";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "값이 참이라면, 두 번째 값을 반환합니다.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "경고: 이 블럭은, 함수 정의 블럭 안에서만 사용할 수 있습니다.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "매개 변수:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "함수에 값을 더합니다.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "매개 변수들";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "이 함수를 추가, 삭제, 혹은 재정렬합니다.";
Blockly.Msg["PROCEDURE_CATEGORY"] = "Procedures";  // untranslated
Blockly.Msg["REDO"] = "다시 실행";
Blockly.Msg["REMOVE_COMMENT"] = "주석 제거";
Blockly.Msg["REMOVE_FROM_BACKPACK"] = "Remove from Backpack";  // untranslated
Blockly.Msg["RENAME_VARIABLE"] = "변수 이름 바꾸기:";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "'%1' 변수 이름을 바꾸기:";
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE"] = "Your Companion App is out of date. Click 'OK' to start the update. Watch your ";  // untranslated
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE2"] = "Your Companion App is out of date. Restart the Companion and use it to scan the QRCode below in order to update";  // untranslated
Blockly.Msg["REPL_EMULATOR_ONLY"] = "You can only use this option to update the Emulator";  // untranslated
Blockly.Msg["REPL_FACTORY_RESET"] = "This will attempt to reset your Emulator to its 'factory' state. If you had previously updated the Companion installed in the Emulator, you will likely have to do this again.";  // untranslated
Blockly.Msg["REPL_HELPER_NOT_RUNNING"] = "The aiStarter helper does not appear to be running<br /><a href='http://appinventor.mit.edu' target='_blank'>Need Help?</a>";  // untranslated
Blockly.Msg["REPL_UPDATE_INFO"] = "The update is now being installed on your device. Watch your device (or emulator) screen and approve the software installation when prompted.<br /><br />IMPORTANT: When the update finishes, choose 'DONE' (don't click 'open'). Then go to App Inventor in your web browser, click the 'Connect' menu and choose 'Reset Connection'.  Then reconnect the device.";  // untranslated
Blockly.Msg["SHOW"] = "Show Workspace Controls";  // untranslated
Blockly.Msg["SHOW_ALL_COMMENTS"] = "Show All Comments";  // untranslated
Blockly.Msg["SORT_C"] = "Sort Blocks by Category";  // untranslated
Blockly.Msg["SORT_H"] = "Sort Blocks by Height";  // untranslated
Blockly.Msg["SORT_W"] = "Sort Blocks by Width";  // untranslated
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "다음 %1 내용 덧붙이기 %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "'%1' 변수의 끝에 일부 텍스트를 덧붙입니다.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "소문자로";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "첫 문자만 대문자로";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "대문자로";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "영문 대소문자 형태를 변경해 돌려줍니다.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "에서, 첫 번째 문자 얻기";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "에서, 마지막부터 # 번째 위치의 문자 얻기";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "에서, 앞에서부터 # 번째 위치의 문자 얻기";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "에서, 마지막 문자 얻기";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "에서, 랜덤하게 한 문자 얻기";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "텍스트 %1 %2에서";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "특정 번째 위치에서, 문자를 얻어내 돌려줍니다.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "%2에서 %1 숫자 세기";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "다른 어떤 텍스트에서 어떤 텍스트가 나타난 횟수를 셉니다.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "텍스트에 항목을 추가합니다.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "가입";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "섹션을 추가, 제거하거나 순서를 변경하여 이 텍스트 블럭을 재구성합니다.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "끝에서부터 # 번째 문자까지";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "# 번째 문자까지";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "마지막 문자까지";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "문장";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "에서, 처음부터 얻어냄";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "에서, 마지막에서 # 번째부터 얻어냄";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "에서, 처음부터 # 번째 문자부터 얻어냄";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "문장 중 일부를 얻어내 돌려줍니다.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "에서 다음 문장이 처음으로 나타난 위치 찾기 :";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "에서 다음 문장이 마지막으로 나타난 위치 찾기 :";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "문장 %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "두 번째 텍스트에서 첫 번째 텍스트가 처음 또는 마지막으로 발생한 색인 위치를 반환합니다. 텍스트가 없으면 %1을 반환합니다.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1이 비어 있습니다";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "입력된 문장이, 빈 문장(\"\")이면 참(true) 값을 돌려줍니다.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "텍스트 만들기";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "여러 개의 아이템들을 연결해(묶어), 새로운 문장을 만듭니다.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "다음 문장의 문자 개수 %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "입력된 문장의, 문자 개수를 돌려줍니다.(공백문자 포함)";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "다음 내용 출력 %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "원하는 문장, 수, 값 등을 출력합니다.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "수에 대해 사용자의 입력을 받습니다.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "문장에 대해 사용자의 입력을 받습니다.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "메시지를 활용해 수 입력";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "메시지를 활용해 문장 입력";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "%3에서 %2을(를) %1(으)로 바꾸기";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";  // untranslated
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";  // untranslated
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://ko.wikipedia.org/wiki/문자열";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "문자, 단어, 문장.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "양쪽의 공백 문자 제거";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "왼쪽의 공백 문자 제거";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "오른쪽의 공백 문자 제거";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "문장의 왼쪽/오른쪽/양쪽에서 스페이스 문자를 제거해 돌려줍니다.";
Blockly.Msg["TODAY"] = "오늘";
Blockly.Msg["UNDO"] = "실행 취소";
Blockly.Msg["UNGENERICIZE_BLOCK"] = "Make Specific";  // untranslated
Blockly.Msg["UNNAMED_KEY"] = "unnamed";  // untranslated
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "항목";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "'집합 %1' 생성";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://ko.wikipedia.org/wiki/%EB%B3%80%EC%88%98_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "변수에 저장 되어있는 값을 돌려줍니다.";
Blockly.Msg["VARIABLES_SET"] = "%1를 %2로 설정";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "'%1 값 읽기' 블럭 생성";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://ko.wikipedia.org/wiki/%EB%B3%80%EC%88%98_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "변수의 값을 입력한 값으로 변경해 줍니다.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "'%1' 변수는 이미 존재합니다.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "'%1' 변수는 다른 유형에 대해 이미 존재합니다: '%2'.";
Blockly.Msg["VARIABLE_CATEGORY"] = "Variables";  // untranslated
Blockly.Msg["VERTICAL_PARAMETERS"] = "Arrange Parameters Vertically";  // untranslated
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "말해 보세요...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_CALL"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";