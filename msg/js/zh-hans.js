// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "添加注释";
Blockly.Msg["ARRANGE_H"] = "Arrange Blocks Horizontally";  // untranslated
Blockly.Msg["ARRANGE_S"] = "Arrange Blocks Diagonally";  // untranslated
Blockly.Msg["ARRANGE_V"] = "Arrange Blocks Vertically";  // untranslated
Blockly.Msg["BACKPACK_CONFIRM_EMPTY"] = "Are you sure you want to empty the backpack?";  // untranslated
Blockly.Msg["BACKPACK_EMPTY"] = "Empty the Backpack";  // untranslated
Blockly.Msg["BACKPACK_GET"] = "Paste All Blocks from Backpack";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "不能删除变量“%1”，因为它是函数“%2”定义的一部分";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "更改值：";
Blockly.Msg["CLEAN_UP"] = "整理块";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "已收起的信息块内包含警告。";
Blockly.Msg["COLLAPSE_ALL"] = "折叠块";
Blockly.Msg["COLLAPSE_BLOCK"] = "折叠块";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "颜色1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "颜色2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "比例";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "混合";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "把两种颜色以一个给定的比例(0.0-1.0)进行混合。";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://zh.wikipedia.org/wiki/颜色";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "从调色板中选择一种颜色。";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "随机颜色";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "随机选择一种颜色。";
Blockly.Msg["COLOUR_RGB_BLUE"] = "蓝色";
Blockly.Msg["COLOUR_RGB_GREEN"] = "绿色";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "红色";
Blockly.Msg["COLOUR_RGB_TITLE"] = "颜色";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "通过指定红色、绿色和蓝色的量创建一种颜色。所有的值必须在0和100之间。";
Blockly.Msg["CONFIRM_DELETE"] = "Confirm deletion";  // untranslated
Blockly.Msg["CONNECT_TO_DO_IT"] = "You must be connected to the companion or emulator to use 'Do It'";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "跳出循环";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "继续下一轮循环";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "跳出包含它的循环。";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "跳过本轮循环的剩余部分，并继进行续下一轮迭代。";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "警告：这个块只能在循环内使用。";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "为列表 %2 里的每一项 %1";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "遍历列表中的每一项，将变量“%1”设为所选项，并执行一些语句。";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "变量 %1 从 %2 数到 %3 每次增加 %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "用变量%1记录从开始数值到终止数值之间的数值，数值按指定间隔增加，并执行指定的块。";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "在这个if语句块中增加一个条件。";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "在这个if语句块中添加一个最终的，包括所有其余情况的条件。";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "增加、删除或重新排列各节来重新配置这个if语句块。";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "否则";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "否则如果";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "如果";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "如果值为真，执行一些语句。";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "如果值为真，则执行第一块语句。否则，则执行第二块语句。";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "如果第一个值为真，则执行第一块的语句。否则，如果第二个值为真，则执行第二块的语句。";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "如果第一个值为真，则执行第一块对语句。否则，如果第二个值为真，则执行语句的第二块。如果没有值为真，则执行最后一块的语句。";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://zh.wikipedia.org/wiki/For循环";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "执行";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "重复 %1 次";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "多次执行一些语句。";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "重复直到条件满足";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "当条件满足时重复";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "只要值为假，执行一些语句。";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "只要值为真，执行一些语句。";
Blockly.Msg["COPY_ALLBLOCKS"] = "Copy All Blocks to Backpack";  // untranslated
Blockly.Msg["COPY_TO_BACKPACK"] = "Add to Backpack";  // untranslated
Blockly.Msg["DELETE_ALL_BLOCKS"] = "删除所有 %1 个块吗？";
Blockly.Msg["DELETE_BLOCK"] = "删除块";
Blockly.Msg["DELETE_VARIABLE"] = "删除变量“%1”";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "要删除对变量“%2”的%1个引用吗？";
Blockly.Msg["DELETE_X_BLOCKS"] = "删除 %1 个块";
Blockly.Msg["DIALOG_ENTER_VALUES"] = "Enter values for:";  // untranslated
Blockly.Msg["DIALOG_SUBMIT"] = "Submit";  // untranslated
Blockly.Msg["DIALOG_UNBOUND_VAR"] = "Unbound Variables";  // untranslated
Blockly.Msg["DISABLE_ALL_BLOCKS"] = "Disable All Blocks";  // untranslated
Blockly.Msg["DISABLE_BLOCK"] = "禁用块";
Blockly.Msg["DISABLE_GRID"] = "Disable Workspace Grid";  // untranslated
Blockly.Msg["DISABLE_SNAPPING"] = "Disable Snap to Grid";  // untranslated
Blockly.Msg["DOWNLOAD_BLOCKS_AS_PNG"] = "Download Blocks as PNG";  // untranslated
Blockly.Msg["DO_IT_DISCONNECTED"] = "Do It (Companion not connected)";  // untranslated
Blockly.Msg["DUPLICATE_BLOCK"] = "复制";
Blockly.Msg["DUPLICATE_COMMENT"] = "复制注释";
Blockly.Msg["ENABLE_ALL_BLOCKS"] = "Enable All Blocks";  // untranslated
Blockly.Msg["ENABLE_BLOCK"] = "启用块";
Blockly.Msg["ENABLE_GRID"] = "Enable Workspace Grid";  // untranslated
Blockly.Msg["ENABLE_SNAPPING"] = "Enable Snap to Grid";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "展开块";
Blockly.Msg["EXPAND_BLOCK"] = "展开块";
Blockly.Msg["EXPORT_IMAGE"] = "Download Blocks as Image";  // untranslated
Blockly.Msg["EXTERNAL_INPUTS"] = "外部输入";
Blockly.Msg["GENERICIZE_BLOCK"] = "Make Generic";  // untranslated
Blockly.Msg["HELP"] = "帮助";
Blockly.Msg["HIDE"] = "Hide Workspace Controls";  // untranslated
Blockly.Msg["HIDE_ALL_COMMENTS"] = "Hide All Comments";  // untranslated
Blockly.Msg["HORIZONTAL_PARAMETERS"] = "Arrange Parameters Horizontally";  // untranslated
Blockly.Msg["INLINE_INPUTS"] = "单行输入";
Blockly.Msg["IOS_CANCEL"] = "取消";
Blockly.Msg["IOS_ERROR"] = "错误";
Blockly.Msg["IOS_OK"] = "确定";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+添加输入";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "允许的语句";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "这个函数有多个输入。";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "输入";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "添加";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+添加变量";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "删除";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "你不能使用空白的变量名。";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "重命名";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "变量名";
Blockly.Msg["LANG_CATEGORY_CONTROLS"] = "Control";  // untranslated
Blockly.Msg["LANG_CATEGORY_LISTS"] = "Lists";  // untranslated
Blockly.Msg["LANG_CATEGORY_LOGIC"] = "Logic";  // untranslated
Blockly.Msg["LANG_CATEGORY_MATH"] = "Math";  // untranslated
Blockly.Msg["LANG_CATEGORY_TEXT"] = "Text";  // untranslated
Blockly.Msg["LANG_COLOUR_BLACK"] = "black";  // untranslated
Blockly.Msg["LANG_COLOUR_BLUE"] = "blue";  // untranslated
Blockly.Msg["LANG_COLOUR_CYAN"] = "cyan";  // untranslated
Blockly.Msg["LANG_COLOUR_DARK_GRAY"] = "dark gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GRAY"] = "gray";  // untranslated
Blockly.Msg["LANG_COLOUR_GREEN"] = "green";  // untranslated
Blockly.Msg["LANG_COLOUR_LIGHT_GRAY"] = "light gray";  // untranslated
Blockly.Msg["LANG_COLOUR_MAGENTA"] = "magenta";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR"] = "make color";  // untranslated
Blockly.Msg["LANG_COLOUR_MAKE_COLOUR_HELPURL"] = "/reference/blocks/colors.html#make";  // untranslated
Blockly.Msg["LANG_COLOUR_ORANGE"] = "orange";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_HELPURL"] = "/reference/blocks/colors.html#basic";  // untranslated
Blockly.Msg["LANG_COLOUR_PICKER_TOOLTIP"] = "Click the square to pick a color.";  // untranslated
Blockly.Msg["LANG_COLOUR_PINK"] = "pink";  // untranslated
Blockly.Msg["LANG_COLOUR_RED"] = "red";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR"] = "split color";  // untranslated
Blockly.Msg["LANG_COLOUR_SPLIT_COLOUR_HELPURL"] = "/reference/blocks/colors.html#split";  // untranslated
Blockly.Msg["LANG_COLOUR_WHITE"] = "white";  // untranslated
Blockly.Msg["LANG_COLOUR_YELLOW"] = "yellow";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACCELEROMETERSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#AccelerometerSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_METHODS_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ACTIVITYSTARTER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#ActivityStarter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_EVENTS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_METHODS_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BALL_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Ball";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_EVENTS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_METHODS_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BARCODESCANNER_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#BarcodeScanner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHCLIENT_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_EVENTS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_METHODS_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BLUETOOTHSERVER_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#BluetoothServer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_BUTTON_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Button";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_EVENTS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_METHODS_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMCORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camcorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_EVENTS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_METHODS_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CAMERA_PROPERTIES_HELPURL"] = "/reference/components/media.html#Camera";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_EVENTS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_METHODS_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CANVAS_PROPERTIES_HELPURL"] = "/reference/components/animation.html#Canvas";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CHECKBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#CheckBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_EVENTS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_METHODS_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CLOCK_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#Clock";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_METHODS_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_CONTACTPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#ContactPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_DATEPICKER_HELPURL"] = "/reference/components/userinterface.html#DatePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_METHODS_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_EMAILPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#EmailPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_EVENTS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_METHODS_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_FUSIONTABLESCONTROL_PROPERTIES_HELPURL"] = "/reference/components/storage.html#FusionTablesControl";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_EVENTS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_METHODS_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GAMECLIENT_PROPERTIES_HELPURL"] = "/reference/components/internal.html#GameClient";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE"] = "when any ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT"] = "for component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_OF_COMPONENT"] = "of component";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GENERIC_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_GYROSCOPESENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#GyroscopeSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_HORIZARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#HorizontalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_EVENTS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_METHODS_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGEPICKER_PROPERTIES_HELPURL"] = "/reference/components/media.html#ImagePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_EVENTS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_METHODS_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGESPRITE_PROPERTIES_HELPURL"] = "/reference/components/animation.html#ImageSprite";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_METHODS_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_IMAGE_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Image";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_METHODS_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LABEL_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Label";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_METHODS_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTPICKER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#ListPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LISTVIEW_HELPURL"] = "/reference/components/userinterface.html#ListView";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_LOCATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#LocationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NOTIFIER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Notifier";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTCOLOR_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtColorSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDIRECT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDirectCommands";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTDRIVE_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtDrive";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTLIGHT_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtLightSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTSOUND_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtSoundSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTTOUCH_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtTouchSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_EVENTS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_METHODS_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_NXTULTRASONIC_PROPERTIES_HELPURL"] = "/reference/components/legomindstorms.html#NxtUltrasonicSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_EVENTS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_METHODS_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_ORIENTATIONSENSOR_PROPERTIES_HELPURL"] = "/reference/components/sensors.html#OrientationSensor";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PASSWORDTEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#PasswordTextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_METHODS_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONECALL_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneCall";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_EVENTS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_METHODS_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PHONENUMBERPICKER_PROPERTIES_HELPURL"] = "/reference/components/social.html#PhoneNumberPicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_METHODS_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_PLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#Player";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_METHODS_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SCREEN_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Screen";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_SET"] = "set ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SETTER_TITLE_TO"] = " to";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_METHODS_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SLIDER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#Slider";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_EVENTS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_METHODS_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUNDRECORDER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SoundRecorder";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_EVENTS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_METHODS_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SOUND_PROPERTIES_HELPURL"] = "/reference/components/media.html#Sound";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_EVENTS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_METHODS_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPEECHRECOGNIZER_PROPERTIES_HELPURL"] = "/reference/components/media.html#SpeechRecognizer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SPINNER_HELPURL"] = "/reference/components/userinterface.html#Spinner";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_SWITCH_HELPURL"] = "/reference/components/userinterface.html#Switch";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TABLEARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#TableArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_EVENTS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_METHODS_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTBOX_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#TextBox";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_EVENTS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_METHODS_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTING_PROPERTIES_HELPURL"] = "/reference/components/social.html#Texting";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_EVENTS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_METHODS_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TEXTTOSPEECH_PROPERTIES_HELPURL"] = "/reference/components/media.html#TextToSpeech";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TIMEPICKER_HELPURL"] = "/reference/components/userinterface.html#TimePicker";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_EVENTS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_METHODS_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TINYWEBDB_PROPERTIES_HELPURL"] = "/reference/components/storage.html#TinyWebDB";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_DO"] = "do";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TITLE_WHEN"] = "when ";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_EVENTS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_METHODS_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_TWITTER_PROPERTIES_HELPURL"] = "/reference/components/social.html#Twitter";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VERTARRANGE_PROPERTIES_HELPURL"] = "/reference/components/layout.html#VerticalArrangement";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_EVENTS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_METHODS_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VIDEOPLAYER_PROPERTIES_HELPURL"] = "/reference/components/media.html#VideoPlayer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_EVENTS_HELPURL"] = "/reference/components/internal.html#votingevents";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_METHODS_HELPURL"] = "/reference/components/internal.html#votingmethods";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_VOTING_PROPERTIES_HELPURL"] = "/reference/components/internal.html#votingproperties";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_EVENTS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_METHODS_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEBVIEWER_PROPERTIES_HELPURL"] = "/reference/components/userinterface.html#WebViewer";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_EVENTS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_METHODS_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_COMPONENT_BLOCK_WEB_PROPERTIES_HELPURL"] = "/reference/components/connectivity.html#Web";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_COLLAPSED_TEXT"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_HELPURL"] = "/reference/blocks/control.html#break";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_INPUT_TEXT"] = "value";  // untranslated
Blockly.Msg["LANG_CONTROLS_BREAK_TITLE"] = "break";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_HELPURL"] = "/reference/blocks/control.html#choose";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_ELSE_RETURN"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_TEST"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_INPUT_THEN_RETURN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TITLE"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_CHOOSE_TOOLTIP"] = "If the condition being tested is true,";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_COLLAPSED_TEXT"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TITLE"] = "close application";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_APPLICATION_TOOLTIP"] = "Closes all screens in this app and stops the app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TITLE"] = "close screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_TOOLTIP"] = "Close the current screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_COLLAPSED_TEXT"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_HELPURL"] = "/reference/blocks/control.html#closescreenwithplaintext";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE"] = "close screen with plain text";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TOOLTIP"] = "Closes the current screen and returns text to the app that ";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_COLLAPSED_TEXT"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_INPUT_RESULT"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE"] = "close screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TOOLTIP"] = "Closes the current screen and returns a result to the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_HELPURL"] = "/reference/blocks/control.html#doreturn";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TITLE"] = "do result";  // untranslated
Blockly.Msg["LANG_CONTROLS_DO_THEN_RETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_COLLAPSED_TEXT"] = "eval but ignore";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_HELPURL"] = "/reference/blocks/control.html#evaluate";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE"] = "evaluate but ignore result";  // untranslated
Blockly.Msg["LANG_CONTROLS_EVAL_BUT_IGNORE_TOOLTIP"] = "Runs the connected block of code and ignores the return value (if any). Useful if need to call a procedure with a return value but don't need the value.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_HELPURL"] = "http://en.wikipedia.org/wiki/Control_flow";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP"] = "of loop";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration";  // untranslated
Blockly.Msg["LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_HELPURL"] = "/reference/blocks/control.html#foreach";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_SUFFIX"] = " in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_COLLAPSED_TEXT"] = "for item in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_INLIST"] = "in list";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_INPUT_VAR"] = "item";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOREACH_TOOLTIP"] = "Runs the blocks in the 'do'  section for each item in ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_HELPURL"] = "/reference/blocks/control.html#forrange";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_PREFIX"] = "for ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_SUFFIX"] = " in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_COLLAPSED_TEXT"] = "for number in range";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_END"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_ITEM"] = "for each";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_START"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_STEP"] = "by";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_INPUT_VAR"] = "number";  // untranslated
Blockly.Msg["LANG_CONTROLS_FORRANGE_TOOLTIP"] = "Runs the blocks in the 'do' section for each numeric ";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_VAR"] = "x";  // untranslated
Blockly.Msg["LANG_CONTROLS_FOR_INPUT_WITH"] = "count with";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_HELPURL"] = "/reference/blocks/control.html#get";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_COLLAPSED_TEXT"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_HELPURL"] = "/reference/blocks/control.html#getplainstarttext";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE"] = "get plain start text";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_PLAIN_START_TEXT_TOOLTIP"] = "Returns the plain text that was passed to this screen when ";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_COLLAPSED_TEXT"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_HELPURL"] = "/reference/blocks/control.html#getstartvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TITLE"] = "get start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_GET_START_VALUE_TOOLTIP"] = "Returns the value that was passed to this screen when it ";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TITLE_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_HELPURL"] = "/reference/blocks/control.html#if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TITLE_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSE"] = "else";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_ELSEIF"] = "else if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_IF"] = "if";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_MSG_THEN"] = "then";  // untranslated
Blockly.Msg["LANG_CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_COLLAPSED_TEXT"] = "open screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_HELPURL"] = "/reference/blocks/control.html#openscreen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE"] = "open another screen";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TOOLTIP"] = "Opens a new screen in a multiple screen app.";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_COLLAPSED_TEXT"] = "open screen with value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_HELPURL"] = "/reference/blocks/control.html#openscreenwithvalue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_SCREENNAME"] = "screenName";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_INPUT_STARTVALUE"] = "startValue";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE"] = "open another screen with start value";  // untranslated
Blockly.Msg["LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TOOLTIP"] = "Opens a new screen in a multiple screen app and passes the ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_HELPURL"] = "/reference/blocks/control.html#while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "until";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT"] = "repeat";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_1"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_COLLAPSED_TEXT"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_DO"] = "do";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_INPUT_TEST"] = "test";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TITLE"] = "while";  // untranslated
Blockly.Msg["LANG_CONTROLS_WHILE_TOOLTIP"] = "Runs the blocks in the 'do' section while the test is ";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT"] = "add items to list list %1 item %2";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_INPUT_LIST"] = " list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TITLE_ADD"] = "add items to list";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEMS_TOOLTIP"] = "Adds items to the end of a list.";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_HELPURL"] = "/reference/blocks/lists.html#additems";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_ADD_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_HELPURL"] = "/reference/blocks/lists.html#append";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT"] = "append to list  list1 %1 list2 %2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST1"] = "list1";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_INPUT_LIST2"] = "list2";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TITLE_APPEND"] = "append to list";  // untranslated
Blockly.Msg["LANG_LISTS_APPEND_LIST_TOOLTIP"] = "Appends all the items in list2 onto the end of list1. After ";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_HELPURL"] = "/reference/blocks/lists.html#copy";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TITLE_COPY"] = "copy list";  // untranslated
Blockly.Msg["LANG_LISTS_COPY_TOOLTIP"] = "Makes a copy of a list, including copying all sublists";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_EMPTY_TITLE"] = "create empty list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_EMPTY_HELPURL"] = "/reference/blocks/lists.html#makealist";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TITLE"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST"] = "make a list";  // untranslated
Blockly.Msg["LANG_LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listfromcsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV"] = "list from csv row";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_ROW_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listfromcsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV"] = "list from csv table";  // untranslated
Blockly.Msg["LANG_LISTS_FROM_CSV_TABLE_TOOLTIP"] = "Parses a text as a CSV (comma-separated value) formatted ";  // untranslated
Blockly.Msg["LANG_LISTS_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT"] = "insert list item  list %1 index %2 item %3";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_ITEM"] = "item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_ITEM_HELPURL"] = "/reference/blocks/lists.html#insert";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TITLE_INSERT_LIST"] = "insert list item";  // untranslated
Blockly.Msg["LANG_LISTS_INSERT_TOOLTIP"] = "Insert an item into a list at the specified position.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_HELPURL"] = "/reference/blocks/lists.html#islistempty";  // untranslated
Blockly.Msg["LANG_LISTS_IS_EMPTY_TOOLTIP"] = "Returns true if the list is empty.";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_HELPURL"] = "/reference/blocks/lists.html#inlist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT"] = "is in list? thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TITLE_IS_IN"] = "is in list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_IN_TOOLTIP"] = "Returns true if the the thing is an item in the list, and ";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_HELPURL"] = "/reference/blocks/lists.html#isalist";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TITLE_IS_LIST"] = "is a list?";  // untranslated
Blockly.Msg["LANG_LISTS_IS_LIST_TOOLTIP"] = "Tests if something is a list.";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_HELPURL"] = "/reference/blocks/lists.html#joinwithseparator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT"] = "join items using separator %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_SEPARATOR"] = "separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TITLE"] = "join with separator";  // untranslated
Blockly.Msg["LANG_LISTS_JOIN_WITH_SEPARATOR_TOOLTIP"] = "Returns text with list elements joined with separator";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_HELPURL"] = "/reference/blocks/lists.html#lengthoflist";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT"] = "length of list list %1";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LENGTH"] = "length of list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_LENGTH_TOOLTIP"] = "Counts the number of items in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_HELPURL"] = "/reference/blocks/lists.html#lookuppairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT"] = "look up in pairs  key %1 pairs %2 notFound %3";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY"] = "key";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND"] = "notFound";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS"] = "pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS"] = "look up in pairs";  // untranslated
Blockly.Msg["LANG_LISTS_LOOKUP_IN_PAIRS_TOOLTIP"] = "Returns the value associated with the key in the list of pairs";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_HELPURL"] = "/reference/blocks/lists.html#pickrandomitem";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM"] = "pick a random item";  // untranslated
Blockly.Msg["LANG_LISTS_PICK_RANDOM_TOOLTIP"] = "Pick an item at random from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_HELPURL"] = "/reference/blocks/lists.html#indexinlist";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT"] = "index in list  thing %1 list %2";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TITLE_POSITION"] = "index in list";  // untranslated
Blockly.Msg["LANG_LISTS_POSITION_IN_TOOLTIP"] = "Find the position of the thing in the list. If it's not in ";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_HELPURL"] = "/reference/blocks/lists.html#removeitem";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT"] = "remove list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE"] = "remove list item";  // untranslated
Blockly.Msg["LANG_LISTS_REMOVE_ITEM_TOOLTIP"] = "Removes the item at the specified position from the list.";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_HELPURL"] = "/reference/blocks/lists.html#replace";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT"] = "replace list item  list %1 index %2 replacement %3";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE"] = "replace list item";  // untranslated
Blockly.Msg["LANG_LISTS_REPLACE_ITEM_TOOLTIP"] = "Replaces the nth item in a list.";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_HELPURL"] = "/reference/blocks/lists.html#reverse";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TITLE_REVERSE"] = "reverse list";  // untranslated
Blockly.Msg["LANG_LISTS_REVERSE_TOOLTIP"] = "Reverses the order of input list and returns it as a new list.";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT"] = "select list item  list %1 index %2";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_INDEX"] = "index";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_HELPURL"] = "/reference/blocks/lists.html#selectlistitem";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TITLE_SELECT"] = "select list item";  // untranslated
Blockly.Msg["LANG_LISTS_SELECT_ITEM_TOOLTIP"] = "Returns the item at position index in the list.";  // untranslated
Blockly.Msg["LANG_LISTS_TITLE_IS_EMPTY"] = "is list empty?";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_HELPURL"] = "/reference/blocks/lists.html#listtocsvrow";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV"] = "list to csv row";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_ROW_TOOLTIP"] = "Interprets the list as a row of a table and returns a CSV ";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_HELPURL"] = "/reference/blocks/lists.html#listtocsvtable";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_INPUT_LIST"] = "list";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV"] = "list to csv table";  // untranslated
Blockly.Msg["LANG_LISTS_TO_CSV_TABLE_TOOLTIP"] = "Interprets the list as a table in row-major format and ";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE"] = "false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_FALSE_HELPURL"] = "/reference/blocks/logic.html#false";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_FALSE"] = "Returns the boolean false.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TOOLTIP_TRUE"] = "Returns the boolean true.";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE"] = "true";  // untranslated
Blockly.Msg["LANG_LOGIC_BOOLEAN_TRUE_HELPURL"] = "/reference/blocks/logic.html#true";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL"] = "http://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_EQ"] = "/reference/blocks/logic.html#=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_HELPURL_NEQ"] = "/reference/blocks/logic.html#not=";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";  // untranslated
Blockly.Msg["LANG_LOGIC_COMPARE_TRANSLATED_NAME"] = "logic equal";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_HELPURL"] = "/reference/blocks/logic.html#not";  // untranslated
Blockly.Msg["LANG_LOGIC_NEGATE_INPUT_NOT"] = "not";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_AND"] = "and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_AND"] = "/reference/blocks/logic.html#and";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_HELPURL_OR"] = "/reference/blocks/logic.html#or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_OR"] = "or";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if all inputs are true.";  // untranslated
Blockly.Msg["LANG_LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if any input is true.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_ADD"] = "+";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_DIVIDE"] = "/";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_ADD"] = "/reference/blocks/math.html#add";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_DIVIDE"] = "/reference/blocks/math.html#divide";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MINUS"] = "/reference/blocks/math.html#subtract";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_MULTIPLY"] = "/reference/blocks/math.html#multiply";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_HELPURL_POWER"] = "/reference/blocks/math.html#exponent";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MINUS"] = "-";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_MULTIPLY"] = "*";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_POWER"] = "^";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_AND"] = "bitwise and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_AND"] = "/reference/blocks/math.html#bitwise_and";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_IOR"] = "/reference/blocks/math.html#bitwise_ior";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_HELPURL_XOR"] = "/reference/blocks/math.html#bitwise_xor";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_IOR"] = "bitwise or";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_AND"] = "Return the bitwise AND of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_IOR"] = "Return the bitwise inclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_TOOLTIP_XOR"] = "Return the bitwise exclusive OR of the two numbers.";  // untranslated
Blockly.Msg["LANG_MATH_BITWISE_XOR"] = "bitwise xor";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_EQ"] = "=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GT"] = ">";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_GTE"] = "≥";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_EQ"] = "/reference/blocks/math.html#=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GT"] = "/reference/blocks/math.html#gt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_GTE"] = "/reference/blocks/math.html#gte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LT"] = "/reference/blocks/math.html#lt";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_LTE"] = "/reference/blocks/math.html#lte";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_HELPURL_NEQ"] = "/reference/blocks/math.html#not=";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LT"] = "<";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_LTE"] = "≤";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_NEQ"] = "≠";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_EQ"] = "Return true if both numbers are equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_COMPARE_TOOLTIP_NEQ"] = "Return true if both numbers are not equal to each other.";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_DEG_TO_RAD"] = "/reference/blocks/math.html#convertdeg";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_HELPURL_RAD_TO_DEG"] = "/reference/blocks/math.html#convertrad";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_DEG_TO_RAD"] = "degrees to radians";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_OP_RAD_TO_DEG"] = "radians to degrees";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_ANGLES_TITLE_CONVERT"] = "convert";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_BIN_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_BIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_DEC_TO_HEX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_HELPURL_HEX_TO_DEC"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#convertnumber";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_BIN_TO_DEC"] = "binary to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_BIN"] = "base 10 to binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_HEX"] = "base 10 to hex";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_OP_HEX_TO_DEC"] = "hex to base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TITLE_CONVERT"] = "convert number";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_BIN_TO_DEC"] = "Takes a string that represents a number in binary and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_BIN"] = "Takes a positive integer in base 10 and returns the string that represents the number in binary";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_DEC_TO_HEX"] = "Takes a positive integer in base 10 and returns the string that represents the number in hexadecimal";  // untranslated
Blockly.Msg["LANG_MATH_CONVERT_NUMBER_TOOLTIP_HEX_TO_DEC"] = "Takes a string that represents a number in hexadecimal and returns the string that represents the number in base 10";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE"] = "÷";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_MODULO"] = "/reference/blocks/math.html#modulo";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_QUOTIENT"] = "/reference/blocks/math.html#quotient";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_HELPURL_REMAINDER"] = "/reference/blocks/math.html#remainder";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_MODULO"] = "modulo of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_QUOTIENT"] = "quotient of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_OPERATOR_REMAINDER"] = "remainder of";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_MODULO"] = "Return the modulo.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_QUOTIENT"] = "Return the quotient.";  // untranslated
Blockly.Msg["LANG_MATH_DIVIDE_TOOLTIP_REMAINDER"] = "Return the remainder.";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_HELPURL"] = "/reference/blocks/math.html#format";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT"] = "format as decimal number %1 places %2";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_NUM"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_INPUT_PLACES"] = "places";  // untranslated
Blockly.Msg["LANG_MATH_FORMAT_AS_DECIMAL_TITLE"] = "format as decimal";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_INPUT_NUM"] = "is binary?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_BINARY_TOOLTIP"] = "Tests if something is a string that represents a binary number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_INPUT_NUM"] = "is Base 10?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_DECIMAL_TOOLTIP"] = "Tests if something is a string that represents a positive base 10 integer.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_INPUT_NUM"] = "is hexadecimal?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_HEXADECIMAL_TOOLTIP"] = "Tests if something is a string that represents a hexadecimal number.";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_HELPURL"] = "/reference/blocks/math.html#isnumber";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_INPUT_NUM"] = "is number?";  // untranslated
Blockly.Msg["LANG_MATH_IS_A_NUMBER_TOOLTIP"] = "Tests if something is a number.";  // untranslated
Blockly.Msg["LANG_MATH_MUTATOR_ITEM_INPUT_NUMBER"] = "number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_HELPURL"] = "/reference/blocks/math.html#number";  // untranslated
Blockly.Msg["LANG_MATH_NUMBER_TOOLTIP"] = "Report the number shown.";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MAX"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_HELPURL_MIN"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/math#min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MAX"] = "max";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_OPERATOR_MIN"] = "min";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest of its arguments..";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_HELPURL"] = "/reference/blocks/math.html#randomfrac";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random number between 0 and 1.";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_HELPURL"] = "/reference/blocks/math.html#randomint";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT"] = "random integer from %1 to %2";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_FROM"] = "from";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_INT_TITLE_RANDOM"] = "random integer";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_HELPURL"] = "/reference/blocks/math.html#randomseed";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_MATH_RANDOM_SEED_TITLE_RANDOM"] = "random set seed";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_CEILING"] = "/reference/blocks/math.html#ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_FLOOR"] = "/reference/blocks/math.html#floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_HELPURL_ROUND"] = "/reference/blocks/math.html#round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_CEILING"] = "ceiling";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_FLOOR"] = "floor";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_OPERATOR_ROUND"] = "round";  // untranslated
Blockly.Msg["LANG_MATH_ROUND_TOOLTIP_ROUND"] = "Round a number up or down.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ABS"] = "/reference/blocks/math.html#abs";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_EXP"] = "/reference/blocks/math.html#e";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_LN"] = "/reference/blocks/math.html#log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_NEG"] = "/reference/blocks/math.html#neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_HELPURL_ROOT"] = "/reference/blocks/math.html#sqrt";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ABSOLUTE"] = "absolute";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_EXP"] = "e^";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_LN"] = "log";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_NEG"] = "neg";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_OP_ROOT"] = "square root";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_EXP"] = "Return e (2.71828...) to the power of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number, i.e. the logarithm to the base e (2.71828...)";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";  // untranslated
Blockly.Msg["LANG_MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2"] = "atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_X"] = "x";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_ATAN2_Y"] = "y";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ACOS"] = "/reference/blocks/math.html#acos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ASIN"] = "/reference/blocks/math.html#asin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN"] = "/reference/blocks/math.html#atan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_ATAN2"] = "/reference/blocks/math.html#atan2";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_COS"] = "/reference/blocks/math.html#cos";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_SIN"] = "/reference/blocks/math.html#sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_HELPURL_TAN"] = "/reference/blocks/math.html#tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_COS"] = "Provides the cosine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_SIN"] = "Provides the sine of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_MATH_TRIG_TOOLTIP_TAN"] = "Provides the tangent of the given angle in degrees.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TOOLTIP"] = "Call a procedure with no return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_TRANSLATED_NAME"] = "call no return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_COLLAPSED_PREFIX"] = "call ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TOOLTIP"] = "Call a procedure with a return value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_TRANSLATED_NAME"] = "call return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_HELPURL"] = "/reference/blocks/procedures.html#do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"] = "procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_TOOLTIP"] = "A procedure that does not return a value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_COLLAPSED_PREFIX"] = "to ";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DEFINE"] = "to";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_HELPURL"] = "/reference/blocks/procedures.html#return";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_TOOLTIP"] = "A procedure returning a result value.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_COLLAPSED_TEXT"] = "do/result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_DO"] = "do";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_HELPURL"] = "/reference/blocks/procedures.html#doreturn";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_THEN_RETURN"] = "result";  // untranslated
Blockly.Msg["LANG_PROCEDURES_DOTHENRETURN_TOOLTIP"] = "Runs the blocks in 'do' and returns a statement. Useful if you need to run a procedure before returning a value to a variable.";  // untranslated
Blockly.Msg["LANG_PROCEDURES_GET_HELPURL"] = "/reference/blocks/procedures.html#get";  // untranslated
Blockly.Msg["LANG_PROCEDURES_HIGHLIGHT_DEF"] = "Highlight Procedure";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TITLE"] = "input:";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORARG_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";  // untranslated
Blockly.Msg["LANG_PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_APPENDTEXT"] = "append text";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_HELPURL"] = "http://www.liv.ac.uk/HPC/HTMLF90Course/HTMLF90CourseNotesnode91.html";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TO"] = "to";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";  // untranslated
Blockly.Msg["LANG_TEXT_APPEND_VARIABLE"] = "item";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_DOWNCASE"] = "/reference/blocks/text.html#downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_HELPURL_UPPERCASE"] = "/reference/blocks/text.html#upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE"] = "downcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "upcase";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_DOWNCASE"] = "Returns a copy of its text string argument converted to lowercase.";  // untranslated
Blockly.Msg["LANG_TEXT_CHANGECASE_TOOLTIP_UPPERCASE"] = "Returns a copy of its text string argument converted to uppercase.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_EQUAL"] = " =";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_GT"] = " >";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_HELPURL"] = "/reference/blocks/text.html#compare";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_INPUT_COMPARE"] = "compare texts";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_LT"] = " <";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_NEQ"] = " ≠";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_EQUAL"] = "Tests whether text strings are identical, ie., have the same characters in the same order. This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text =.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_GT"] = "Reports whether text1 is lexicographically greater than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_LT"] = "Tests whether text1 is lexicographically less than text2. if one text is the prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.";  // untranslated
Blockly.Msg["LANG_TEXT_COMPARE_TOOLTIP_NEQ"] = "Tests whether text strings are different, ie., don't have the same characters in the same order. This is different from ordinary ≠ in the case where the text strings are numbers: 123 and 0123 are text ≠ but are mathematically =.";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_HELPURL"] = "/reference/blocks/text.html#contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT"] = "contains  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_CONTAINS"] = "contains";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_CONTAINS_TOOLTIP"] = "Tests whether the piece is contained in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_HELPURL"] = "/reference/blocks/text.html#isempty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_INPUT_ISEMPTY"] = "is empty";  // untranslated
Blockly.Msg["LANG_TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the length of the ' + 'text is 0, false otherwise.";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_HELPURL"] = "/reference/blocks/text.html#join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TITLE_ITEM"] = "string";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_ITEM_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TITLE_JOIN"] = "join";  // untranslated
Blockly.Msg["LANG_TEXT_JOIN_TOOLTIP"] = "Appends all the inputs to form a single text string. If there are no inputs, makes an empty text.";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_HELPURL"] = "/reference/blocks/text.html#length";  // untranslated
Blockly.Msg["LANG_TEXT_LENGTH_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_HELPURL"] = "/reference/blocks/text.html#replaceall";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT"] = "replace all text %1 segment %2 replacement %3";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT"] = "replacement";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TITLE_REPLACE_ALL"] = "replace all";  // untranslated
Blockly.Msg["LANG_TEXT_REPLACE_ALL_TOOLTIP"] = "Returns a new text obtained by replacing all occurrences of the segment with the replacement.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_AT_TOOLTIP"] = "Extracts the segment of the given length from the given text starting from the given text starting from the given position. Position 1 denotes the beginning of the text.";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_HELPURL"] = "/reference/blocks/text.html#segment";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT"] = "segment  text %1 start %2 length %3";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_LENGTH"] = "length";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_START"] = "start";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SEGMENT_TITLE_SEGMENT"] = "segment";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_HELPURL"] = "/reference/blocks/text.html#splitspaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_SPACES_TITLE"] = "split at spaces";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_AT_TOOLTIP"] = "Split the text into pieces separated by spaces.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL"] = "";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT"] = "/reference/blocks/text.html#split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_ANY"] = "/reference/blocks/text.html#splitatany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST"] = "/reference/blocks/text.html#splitat";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_HELPURL_SPLIT_AT_FIRST_OF_ANY"] = "/reference/blocks/text.html#splitatfirstofany";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT"] = "at";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_AT_LIST"] = "at (list)";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT"] = "split";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY"] = "split at any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST"] = "split at first";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY"] = "split at first of any";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT"] = "Divides text into pieces using the text 'at' as the dividing points and produces a list of the results.   Splitting 'one,two,three,four' at ',' (comma) returns the list '(one two three four)'.  Splitting 'one-potato,two-potato,three-potato,four' at '-potato', returns the list '(one two three four)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_ANY"] = "Divides the given text into a list, using any of the items in the list 'at' as the  dividing point, and returns a list of the results.  Splitting 'appleberry,banana,cherry,dogfood' with 'at' as the two-element list whose  first item is a comma and whose second item is 'rry' returns a list of four items:  '(applebe banana che dogfood)'.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST"] = "Divides the given text into two pieces using the location of the first occurrence of  the text 'at' as the dividing point, and returns a two-item list consisting of the piece  before the dividing point and the piece after the dividing point.  Splitting 'apple,banana,cherry,dogfood' with a comma as the splitting point  returns a list of two items: the first is the text 'apple' and the second is the text  'banana,cherry,dogfood'.  Notice that the comma after 'apple' does not appear in the result,  because that is the dividing point.";  // untranslated
Blockly.Msg["LANG_TEXT_SPLIT_TOOLTIP_SPLIT_AT_FIRST_OF_ANY"] = "Divides the given text into a two-item list, using the first location of any item  in the list 'at' as the dividing point. Splitting 'I love apples bananas apples grapes' by the list '(ba,ap)' returns  a list of two items, the first being 'I love' and the second being  'ples bananas apples grapes.'";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_HELPURL"] = "/reference/blocks/text.html#startsat";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT"] = "starts at  text %1 piece %2";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_PIECE"] = "piece";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_STARTS_AT"] = "starts at";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_INPUT_TEXT"] = "text";  // untranslated
Blockly.Msg["LANG_TEXT_STARTS_AT_TOOLTIP"] = "Returns the starting index of the piece in the text. where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_HELPURL"] = "/reference/blocks/text.html#string";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_HELPURL"] = "/reference/blocks/text.html#isstring";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_INPUT_THING"] = "thing";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TITLE"] = "is a string?";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_IS_STRING_TOOLTIP"] = "Returns true if <code>thing</code> is a string.";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_LEFT_QUOTE"] = "“";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE"] = "Obfuscated Text";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_OBFUSCATE_HELPURL"] = "/reference/blocks/text.html#obfuscatetext";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_RIGHT_QUOTE"] = "”";  // untranslated
Blockly.Msg["LANG_TEXT_TEXT_TOOLTIP"] = "A text string.";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_HELPURL"] = "/reference/blocks/text.html#trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TITLE_TRIM"] = "trim";  // untranslated
Blockly.Msg["LANG_TEXT_TRIM_TOOLTIP"] = "Returns a copy of its text string arguments with any leading or trailing spaces removed.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_COLLAPSED_TEXT"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_HELPURL"] = "/reference/blocks/variables.html#get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TITLE_GET"] = "get";  // untranslated
Blockly.Msg["LANG_VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_COLLAPSED_TEXT"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT"] = "initialize global";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_DECLARATION_TOOLTIP"] = "Creates a global variable and gives it the value of the attached blocks.";  // untranslated
Blockly.Msg["LANG_VARIABLES_GLOBAL_PREFIX"] = "global";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_DEFAULT_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_COLLAPSED_TEXT"] = "local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_HELPURL"] = "/reference/blocks/variables.html#return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_IN_RETURN"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TOOLTIP"] = "Allows you to create variables that are only accessible in the return part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_EXPRESSION_TRANSLATED_NAME"] = "initialize local in return";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_HELPURL"] = "/reference/blocks/variables.html#do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_INPUT_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_IN_DO"] = "in";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT"] = "initialize local";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TOOLTIP"] = "Allows you to create variables that are only accessible in the do part of this block.";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_DECLARATION_TRANSLATED_NAME"] = "initialize local in do";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_DEFAULT_VARIABLE"] = "x";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_ARG_TITLE_NAME"] = "name";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TITLE_LOCAL_NAMES"] = "local names";  // untranslated
Blockly.Msg["LANG_VARIABLES_LOCAL_MUTATOR_CONTAINER_TOOLTIP"] = "";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_COLLAPSED_TEXT"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_HELPURL"] = "/reference/blocks/variables.html#set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_SET"] = "set";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TITLE_TO"] = "to";  // untranslated
Blockly.Msg["LANG_VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg["LANG_VARIABLES_VARIABLE"] = " variable";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "创建空列表";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "返回一个列表，长度为 0，不包含任何数据记录";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "列表";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "增加、删除或重新排列各部分以此重新配置这个列表块。";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "建立列表从";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "将一个项添加到列表中。";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "建立一个具有任意数量项目的列表。";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "第一个";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "倒数第#";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "取得";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "取得并移除";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "最后一个";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "随机的";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "移除";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "-";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "返回列表中的第一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "返回在列表中的指定位置的项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "返回列表中的最后一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "返回列表中的随机一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "移除并返回列表中的第一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "移除并返回列表中的指定位置的项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "移除并返回列表中的最后一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "移除并返回列表中的随机一项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "移除列表中的第一项";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "移除在列表中的指定位置的项。";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "移除列表中的最后一项";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "删除列表中的随机一项。";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "到倒数第#";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "到#";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "到最后";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "获取子列表从第一个";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "获取子列表从最后一个#";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "获取子列表从#";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "-";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "复制列表中指定的部分。";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1是最后一项。";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1是第一项。";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "寻找第一次出现的项";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "寻找最后一次出现的项";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "返回在列表中的第一/最后一个匹配项的索引值。如果找不到项目则返回%1。";
Blockly.Msg["LISTS_INLIST"] = "在列表中";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1是空的";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "如果改列表为空，则返回真。";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "%1的长度";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "返回列表的长度。";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "建立列表使用项 %1 重复 %2 次";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "建立包含指定重复次数的值的列表。";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "倒转%1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "倒转一个列表的拷贝。";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "值为";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "插入在";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "设置";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "在列表的起始处添加该项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "插入在列表中指定位置的项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "在列表的末尾处添加该项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "在列表的随机位置插入该项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "设置列表中的第一项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "设置在列表中指定位置的项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "设置列表中的最后一项。";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "设置列表中的随机一项。";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "升序";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "降序";
Blockly.Msg["LISTS_SORT_TITLE"] = "排序%1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "排序一个列表的拷贝。";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "按字母排序，忽略大小写";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "按数字排序";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "按字母排序";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "从文本制作列表";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "从列表拆出文本";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "加入文本列表至一个文本，由分隔符分隔。";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "拆分文本到文本列表，按每个分隔符拆分。";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "用分隔符";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "假";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "返回真或假。";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "真";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://zh.wikipedia.org/wiki/不等";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "如果两个输入结果相等，则返回真。";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "如果第一个输入结果比第二个大，则返回真。";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "如果第一个输入结果大于或等于第二个输入结果，则返回真。";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "如果第一个输入结果比第二个小，则返回真。";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "如果第一个输入结果小于或等于第二个输入结果，则返回真。";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "如果两个输入结果不相等，则返回真。";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "非%1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "如果输入结果为假，则返回真；如果输入结果为真，则返回假。";
Blockly.Msg["LOGIC_NULL"] = "空";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "返回空值。";
Blockly.Msg["LOGIC_OPERATION_AND"] = "并且";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "或";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "如果两个输入结果都为真，则返回真。";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "如果至少有一个输入结果为真，则返回真。";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "断言";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://zh.wikipedia.org/wiki/条件运算符";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "如果为假";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "如果为真";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "检查“断言”里的条件语句。如果条件为真，则返回“如果为真”的值，否则，则返回“如果为假”的值。";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://zh.wikipedia.org/wiki/算术";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "返回两个数值的和。";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "返回两个数值的商。";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "返回两个数值的差值。";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "返回两个数值的乘积。";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "返回以第一个数值为底数，以第二个数值为幂的结果。";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://zh.wikipedia.org/wiki/反正切2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "点(x:%1,y:%2)的方位角";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "返回点（X，Y）的反正切值，范围为-180到180度。";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://zh.wikipedia.org/wiki/加法";
Blockly.Msg["MATH_CHANGE_TITLE"] = "将 %1 增加 %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "为变量“%1”增加一个数值。";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://zh.wikipedia.org/wiki/数学常数";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "返回一个常见常量：π (3.141…)、e (2.718…)、φ (1.618…)、平方根 (1.414…)、开平方根 (0.707…)或∞ (无限大)。";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "将 %1 限制在 最低 %2 到最高 %3 之间";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "将一个数值限制在两个指定的数值范围（含边界）之间。";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "可被整除";
Blockly.Msg["MATH_IS_EVEN"] = "是偶数";
Blockly.Msg["MATH_IS_NEGATIVE"] = "是负数";
Blockly.Msg["MATH_IS_ODD"] = "是奇数";
Blockly.Msg["MATH_IS_POSITIVE"] = "是正数";
Blockly.Msg["MATH_IS_PRIME"] = "是质数";
Blockly.Msg["MATH_IS_TOOLTIP"] = "检查一个数值是否是偶数、奇数、质数、自然数、正数、负数或者是否能被某数整除。返回真或假。";
Blockly.Msg["MATH_IS_WHOLE"] = "是整数";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://zh.wikipedia.org/wiki/模除";
Blockly.Msg["MATH_MODULO_TITLE"] = "取 %1 ÷ %2 的余数";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "返回这两个数字相除后的余数。";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://zh.wikipedia.org/wiki/数";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "一个数值。";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "列表平均值";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "列表最大值";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "列表中位数";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "列表最小值";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "列表中的众数";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "列表随机项";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "列表的标准差";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "列表中数值的和";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "返回列表中的数值的平均值。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "返回列表中最大值。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "返回列表中数值的中位数。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "返回列表中最小值。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "返回列表中的出现次数最多的项的列表。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "从列表中返回一个随机的元素。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "返回列表的标准差。";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "返回列表中的所有数值的和。";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://zh.wikipedia.org/wiki/随机数生成器";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "随机小数";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "返回一个介于0.0到1.0之间（含边界）的随机数。";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://zh.wikipedia.org/wiki/随机数生成器";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "从 %1 到 %2 范围内的随机整数";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "返回一个限制在两个指定数值的范围（含边界）之间的随机整数。";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://zh.wikipedia.org/wiki/数值修约";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "四舍五入";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "向下舍入";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "向上舍入";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "数字向上或向下舍入。";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://zh.wikipedia.org/wiki/平方根";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "绝对值";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "平方根";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "返回一个数值的绝对值。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "返回一个数值的e次幂。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "返回一个数值的自然对数。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "返回一个数值的以10为底的对数。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "返回一个数值的相反数。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "返回一个数值的10次幂。";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "返回一个数的平方根。";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://zh.wikipedia.org/wiki/三角函数";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "返回一个数值的反余弦值。";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "返回一个数值的反正弦值。";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "返回一个数值的反正切值。";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "返回指定角度的余弦值(非弧度）。";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "返回指定角度的正弦值(非弧度）。";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "返回指定角度的正切值(非弧度）。";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "创建颜色变量...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "创建数字变量...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "创建字符串变量...";
Blockly.Msg["NEW_VARIABLE"] = "创建变量...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "新变量的名称：";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "新变量的类型：";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "-";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "允许声明";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "与：";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://zh.wikipedia.org/wiki/子程序";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "运行用户定义的函数“%1”。";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://zh.wikipedia.org/wiki/子程序";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "运行用户定义的函数“%1”，并使用它的输出值。";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "与：";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "创建“%1”";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "描述该功能...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "-";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://zh.wikipedia.org/wiki/子程序";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "做点什么";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "至";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "创建一个不带输出值的函数。";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://zh.wikipedia.org/wiki/子程序";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "返回";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "创建一个有输出值的函数。";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "警告：此函数具有重复参数。";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "突出显示函数定义";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "如果值为真，则返回第二个值。";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "警告：这个块只能在函数内部使用。";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "输入名称：";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "添加函数输入。";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "输入";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "添加、移除或重新排此函数的输入。";
Blockly.Msg["PROCEDURE_CATEGORY"] = "Procedures";  // untranslated
Blockly.Msg["REDO"] = "重做";
Blockly.Msg["REMOVE_COMMENT"] = "删除注释";
Blockly.Msg["REMOVE_FROM_BACKPACK"] = "Remove from Backpack";  // untranslated
Blockly.Msg["RENAME_VARIABLE"] = "重命名变量...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "将所有“%1”变量重命名为:";
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE"] = "Your Companion App is out of date. Click 'OK' to start the update. Watch your ";  // untranslated
Blockly.Msg["REPL_COMPANION_OUT_OF_DATE2"] = "Your Companion App is out of date. Restart the Companion and use it to scan the QRCode below in order to update";  // untranslated
Blockly.Msg["REPL_EMULATOR_ONLY"] = "You can only use this option to update the Emulator";  // untranslated
Blockly.Msg["REPL_FACTORY_RESET"] = "This will attempt to reset your Emulator to its 'factory' state. If you had previously updated the Companion installed in the Emulator, you will likely have to do this again.";  // untranslated
Blockly.Msg["REPL_HELPER_NOT_RUNNING"] = "The aiStarter helper does not appear to be running<br /><a href='http://appinventor.mit.edu' target='_blank'>Need Help?</a>";  // untranslated
Blockly.Msg["REPL_UPDATE_INFO"] = "The update is now being installed on your device. Watch your device (or emulator) screen and approve the software installation when prompted.<br /><br />IMPORTANT: When the update finishes, choose 'DONE' (don't click 'open'). Then go to App Inventor in your web browser, click the 'Connect' menu and choose 'Reset Connection'.  Then reconnect the device.";  // untranslated
Blockly.Msg["SHOW"] = "Show Workspace Controls";  // untranslated
Blockly.Msg["SHOW_ALL_COMMENTS"] = "Show All Comments";  // untranslated
Blockly.Msg["SORT_C"] = "Sort Blocks by Category";  // untranslated
Blockly.Msg["SORT_H"] = "Sort Blocks by Height";  // untranslated
Blockly.Msg["SORT_W"] = "Sort Blocks by Width";  // untranslated
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "向%1附加文本%2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "将一些文本追加到变量“%1”里。";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "转为小写";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "转为首字母大写";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "转为大写";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "用不同的大小写模式复制并返回这段文字。";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "寻找第一个字母";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "获取字符从倒数#";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "获取字符从#";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "寻找最后一个字母";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "寻找随机的字母";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "-";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "在文本%1 里 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "返回位于指定位置的字母。";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "计算%1在%2里出现的次数";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "计算在一段文本中，某个部分文本重复出现了多少次。";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "将一个项添加到文本中。";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "加入";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "添加、移除或重新排列各节来重新配置这个文本块。";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "到最后一个字符#";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "至字符#";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "到最后一个字符";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "从文本";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "取得子串自第一个字符";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "取得子串自倒数#";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "取得子串自#";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "-";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "返回文本中指定的一部分。";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "寻找第一次出现的文本";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "寻找最后一次出现的文本";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "在文本 %1 里 %2  %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "返回第一个文本段在第二个文本段中的第一/最后一个匹配项的起始位置。如果未找到，则返回%1。";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1是空的";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "如果给定的文本为空，则返回真。";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "建立文本从";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "通过串起任意数量的项以建立一段文本。";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "%1的长度";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "返回给定文本的字母数（包括空格）。";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "输出%1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "输出指定的文字、数字或其他值。";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "要求用户输入数字。";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "要求用户输入一些文本。";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "要求输入数字，并显示提示消息";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "要求输入文本，并显示提示消息";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "在%3中，将%1替换为%2";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "在一段文本中，将出现过的某部分文本都替换掉。";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "翻转文本%1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "将文本中各个字符的顺序倒转。";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://zh.wikipedia.org/wiki/字符串";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "一个字、词语或一行文本。";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "消除其两侧的空白";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "消除其左侧的空白";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "消除其右侧的空白";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "从某一端或同时从两端删除多余的空白，并返回这段文字的一个副本。";
Blockly.Msg["TODAY"] = "今天";
Blockly.Msg["UNDO"] = "撤销";
Blockly.Msg["UNGENERICIZE_BLOCK"] = "Make Specific";  // untranslated
Blockly.Msg["UNNAMED_KEY"] = "匿名";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "项目";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "创建“设定%1”";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "返回此变量的值。";
Blockly.Msg["VARIABLES_SET"] = "赋值 %1 为 %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "创建“获得%1”";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "设置此变量，以使它和输入值相等。";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "名字叫“%1”的变量已经存在了。";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "名字叫“%1”的变量已经有了另一个类型：“%2”。";
Blockly.Msg["VARIABLE_CATEGORY"] = "Variables";  // untranslated
Blockly.Msg["VERTICAL_PARAMETERS"] = "Arrange Parameters Vertically";  // untranslated
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "说点什么...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_CALL"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_CALL"];
Blockly.Msg["LANG_PROCEDURES_CALLRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_CALLNORETURN_PROCEDURE"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["LANG_PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["LANG_PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";